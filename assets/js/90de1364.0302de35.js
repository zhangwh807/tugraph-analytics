"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4339],{3586:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(4848),i=r(8453);const a={},s="Traversal API\u4ecb\u7ecd",l={id:"application-development/api/graph/traversal",title:"Traversal API\u4ecb\u7ecd",description:"GeaFlow\u5bf9\u5916\u63d0\u4f9b\u4e86\u5b9e\u73b0\u56fe\u904d\u5386\u7b97\u6cd5\u7684\u63a5\u53e3\uff0c\u901a\u8fc7\u5b9e\u73b0\u8be5\u63a5\u53e3\u8fdb\u884c\u5b50\u56fe\u904d\u5386\uff0c\u5168\u56fe\u904d\u5386\u3002\u7528\u6237\u53ef\u5728\u904d\u5386\u7b97\u6cd5\u4e2d\u9009\u53d6\u70b9\u8fb9\u7ee7\u7eed\u904d\u5386\uff0c\u5e76\u5b9a\u4e49\u8fed\u4ee3\u6b21\u6570\u3002",source:"@site/../docs-cn/source/5.application-development/1.api/3.graph/1.traversal.md",sourceDirName:"5.application-development/1.api/3.graph",slug:"/application-development/api/graph/traversal",permalink:"/tugraph-analytics/zh/application-development/api/graph/traversal",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sink API\u4ecb\u7ecd",permalink:"/tugraph-analytics/zh/application-development/api/stream/sink"},next:{title:"Compute API\u4ecb\u7ecd",permalink:"/tugraph-analytics/zh/application-development/api/graph/compute"}},d={},c=[{value:"\u52a8\u6001\u56fe",id:"\u52a8\u6001\u56fe",level:2},{value:"\u63a5\u53e3",id:"\u63a5\u53e3",level:3},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:3},{value:"\u9759\u6001\u56fe",id:"\u9759\u6001\u56fe",level:2},{value:"\u63a5\u53e3",id:"\u63a5\u53e3-1",level:3},{value:"\u793a\u4f8b",id:"\u793a\u4f8b-1",level:3}];function o(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"traversal-api\u4ecb\u7ecd",children:"Traversal API\u4ecb\u7ecd"})}),"\n",(0,t.jsx)(n.p,{children:"GeaFlow\u5bf9\u5916\u63d0\u4f9b\u4e86\u5b9e\u73b0\u56fe\u904d\u5386\u7b97\u6cd5\u7684\u63a5\u53e3\uff0c\u901a\u8fc7\u5b9e\u73b0\u8be5\u63a5\u53e3\u8fdb\u884c\u5b50\u56fe\u904d\u5386\uff0c\u5168\u56fe\u904d\u5386\u3002\u7528\u6237\u53ef\u5728\u904d\u5386\u7b97\u6cd5\u4e2d\u9009\u53d6\u70b9\u8fb9\u7ee7\u7eed\u904d\u5386\uff0c\u5e76\u5b9a\u4e49\u8fed\u4ee3\u6b21\u6570\u3002"}),"\n",(0,t.jsx)(n.h2,{id:"\u52a8\u6001\u56fe",children:"\u52a8\u6001\u56fe"}),"\n",(0,t.jsx)(n.h3,{id:"\u63a5\u53e3",children:"\u63a5\u53e3"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"API"}),(0,t.jsx)(n.th,{children:"\u63a5\u53e3\u8bf4\u660e"}),(0,t.jsx)(n.th,{children:"\u5165\u53c2\u8bf4\u660e"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"void open(IncVertexCentricTraversalFuncContext<K, VV, EV, M, R> vertexCentricFuncContext)"}),(0,t.jsx)(n.td,{children:"vertexCentricFunction\u8fdb\u884copen\u64cd\u4f5c"}),(0,t.jsx)(n.td,{children:"vertexCentricFuncContext\uff1aK\u8868\u793avertexId\u7684\u7c7b\u578b\uff0cVV\u8868\u793avertex value\u7c7b\u578b\uff0cEV\u8868\u793aedge value\u7c7b\u578b\uff0cM\u8868\u793a\u56fe\u904d\u5386\u4e2d\u5b9a\u4e49\u7684\u6d88\u606f\u7c7b\u578b\uff0cR\u8868\u793a\u904d\u5386\u7ed3\u679c\u7c7b\u578b\u3002"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"void init(ITraversalRequest traversalRequest)"}),(0,t.jsx)(n.td,{children:"\u56fe\u904d\u5386\u521d\u59cb\u5316\u63a5\u53e3"}),(0,t.jsx)(n.td,{children:"traversalRequest\uff1a\u56fe\u904d\u5386\u89e6\u53d1\u70b9\uff0c\u5176\u4e2dK\u8868\u793avertex id\u7684\u7c7b\u578b\u3002"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"void evolve(K vertexId, TemporaryGraph<K, VV, EV> temporaryGraph)"}),(0,t.jsx)(n.td,{children:"\u9996\u8f6e\u8ba1\u7b97\u5bf9\u589e\u91cf\u56fe\u5b9e\u73b0\u5904\u7406\u903b\u8f91"}),(0,t.jsxs)(n.td,{children:["vertexId\uff1a\u5f53\u524d\u8ba1\u7b97\u70b9\u7684id\uff0c\u5176\u4e2dK\u8868\u793avertex id\u7684\u7c7b\u578b\u3002",(0,t.jsx)(n.br,{}),"temporaryGraph\uff1a\u4e34\u65f6\u589e\u91cf\u56fe\uff0c\u5176\u4e2dK\u8868\u793avertexId\u7684\u7c7b\u578b\uff0cVV\u8868\u793avertex value\u7c7b\u578b\uff0cEV\u8868\u793aedge value\u7c7b\u578b\u3002"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"void compute(K vertexId, Iterator messageIterator)"}),(0,t.jsx)(n.td,{children:"\u56fe\u904d\u5386\u63a5\u53e3"}),(0,t.jsxs)(n.td,{children:["vertexId\uff1a\u5f53\u524d\u8ba1\u7b97\u70b9\u7684id\uff0c\u5176\u4e2dK\u8868\u793avertex id\u7684\u7c7b\u578b\u3002",(0,t.jsx)(n.br,{}),"messageIterator\uff1a\u56fe\u904d\u5386\u8fc7\u7a0b\u4e2d\u6240\u6709\u53d1\u9001\u7ed9\u5f53\u524dvertex\u7684\u6d88\u606f\uff0c\u5176\u4e2dM\u8868\u793a\u904d\u5386\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u5b9a\u4e49\u7684\u53d1\u9001\u6d88\u606f\u7c7b\u578b\u3002"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"void finish(K vertexId, MutableGraph<K, VV, EV> mutableGraph)"}),(0,t.jsx)(n.td,{children:"\u56fe\u904d\u5386\u5b8c\u6210\u63a5\u53e3"}),(0,t.jsxs)(n.td,{children:["vertexId\uff1a\u5f53\u524d\u8ba1\u7b97\u70b9\u7684id\uff0c\u5176\u4e2dK\u8868\u793avertex id\u7684\u7c7b\u578b\u3002",(0,t.jsx)(n.br,{}),"mutableGraph\uff1a\u53ef\u53d8\u56fe\uff0c\u5176\u4e2dK\u8868\u793avertexId\u7684\u7c7b\u578b\uff0cVV\u8868\u793avertex value\u7c7b\u578b\uff0cEV\u8868\u793aedge value\u7c7b\u578b\u3002"]})]})]})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u8be6\u7ec6\u63a5\u53e3"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"   public interface IncVertexCentricTraversalFunction<K, VV, EV, M, R> extends IncVertexCentricFunction<K, VV\n   , EV, M> {\n\n   void open(IncVertexCentricTraversalFuncContext<K, VV, EV, M, R> vertexCentricFuncContext);\n\n   void init(ITraversalRequest<K> traversalRequest);\n\n   void evolve(K vertexId, TemporaryGraph<K, VV, EV> temporaryGraph);\n\n   void compute(K vertexId, Iterator<M> messageIterator);\n\n   void finish(K vertexId, MutableGraph<K, VV, EV> mutableGraph);\n\n   interface IncVertexCentricTraversalFuncContext<K, VV, EV, M, R> extends IncGraphContext<K, VV, EV,\n   M> {\n   /** \u6fc0\u6d3b\u904d\u5386\u8d77\u70b9\u7528\u4ee5\u4e0b\u4e00\u8f6e\u8fed\u4ee3\u4f7f\u7528 */\n   void activeRequest(ITraversalRequest<K> request);\n   /** \u6536\u96c6\u904d\u5386\u7ed3\u679c */\n   void takeResponse(ITraversalResponse<R> response);\n\n        void broadcast(IGraphMessage<K, M> message);\n    \t/** \u83b7\u53d6\u5386\u53f2\u56fe\u6570\u636e */\n        TraversalHistoricalGraph<K, VV, EV> getHistoricalGraph();\n   }\n\n\n    interface TraversalHistoricalGraph<K, VV, EV>  extends HistoricalGraph<K, VV, EV> {\n    \t/** \u83b7\u53d6\u6307\u5b9a\u7248\u672c\u5feb\u7167 */\n        TraversalGraphSnapShot<K, VV, EV> getSnapShot(long version);\n    }\n\n    interface TraversalGraphSnapShot<K, VV, EV> extends GraphSnapShot<K, VV, EV> {\n    \t/** \u83b7\u53d6\u5f00\u59cb\u56fe\u904d\u5386\u7684\u70b9 */\n        TraversalVertexQuery<K, VV> vertex();\n    \t/** \u83b7\u53d6\u5f00\u59cb\u56fe\u904d\u5386\u7684\u8fb9 */\n        TraversalEdgeQuery<K, EV> edges();\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u793a\u4f8b",children:"\u793a\u4f8b"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class IncrGraphTraversalAll {\n\n    private static final Logger LOGGER =\n        LoggerFactory.getLogger(IncrGraphTraversalAll.class);\n    \n    public static void main(String[] args) {\n        Environment environment = EnvironmentFactory.onLocalEnvironment();\n        Pipeline pipeline = PipelineFactory.buildPipeline(environment);\n        String graphName = "graph_view_name";\n        GraphViewDesc graphViewDesc = GraphViewBuilder.createGraphView(graphName)\n            .withShardNum(2)\n            .withBackend(BackendType.RocksDB)\n            .withSchema(new GraphMetaType(IntegerType.INSTANCE, ValueVertex.class, Integer.class, ValueEdge.class, IntegerType.class))\n            .build();\n        pipeline.withView(graphName, graphViewDesc);\n        pipeline.submit(new PipelineTask() {\n            @Override\n            public void execute(IPipelineTaskContext pipelineTaskCxt) {\n                PWindowSource<IVertex<Integer, Integer>> vertices =\n                    pipelineTaskCxt.buildSource(new RecoverableFileSource<>("data/input/email_edge",\n                            line -> {\n                                String[] fields = line.split(",");\n                                IVertex<Integer, Integer> vertex1 = new ValueVertex<>(\n                                    Integer.valueOf(fields[0]), 1);\n                                IVertex<Integer, Integer> vertex2 = new ValueVertex<>(\n                                    Integer.valueOf(fields[1]), 1);\n                                return Arrays.asList(vertex1, vertex2);\n                            }), SizeTumblingWindow.of(10000));\n                \n                PWindowSource<IEdge<Integer, Integer>> edges =\n                    pipelineTaskCxt.buildSource( new RecoverableFileSource<>("data/input/email_edge",\n                        line -> {\n                            String[] fields = line.split(",");\n                            IEdge<Integer, Integer> edge = new ValueEdge<>(Integer.valueOf(fields[0]),\n                                Integer.valueOf(fields[1]), 1);\n                            return Collections.singletonList(edge);\n                        }), SizeTumblingWindow.of(5000));\n\n                PGraphView<Integer, Integer, Integer> fundGraphView =\n                    pipelineTaskCxt.getGraphView(graphName);\n                PIncGraphView<Integer, Integer, Integer> incGraphView =\n                    fundGraphView.appendGraph(vertices, edges);\n                incGraphView.incrementalTraversal(new IncGraphTraversalAlgorithms(3))\n                    .start()\n                    .sink(v -> {});\n            }\n        });\n        IPipelineResult result = pipeline.execute();\n        result.get();\n    }\n    \n    public static class IncGraphTraversalAlgorithms extends IncVertexCentricTraversal<Integer,\n            Integer, Integer, Integer, Integer> {\n        \n        public IncGraphTraversalAlgorithms(long iterations) {\n            super(iterations);\n        }\n        \n        @Override\n        public IncVertexCentricTraversalFunction<Integer, Integer, Integer, Integer, Integer> getIncTraversalFunction() {\n            return new IncVertexCentricTraversalFunction<Integer, Integer, Integer, Integer, Integer>() {\n\n                private IncVertexCentricTraversalFuncContext<Integer, Integer, Integer, Integer, Integer> vertexCentricFuncContext;\n\n                @Override\n                public void open(IncVertexCentricTraversalFuncContext<Integer, Integer, Integer, Integer,\n                    Integer> vertexCentricFuncContext) {\n                    this.vertexCentricFuncContext = vertexCentricFuncContext;\n                }\n\n                @Override\n                public void evolve(Integer vertexId,\n                                   TemporaryGraph<Integer, Integer, Integer> temporaryGraph) {\n                    MutableGraph<Integer, Integer,\n                        Integer> mutableGraph = this.vertexCentricFuncContext.getMutableGraph();\n                    IVertex<Integer, Integer> vertex = temporaryGraph.getVertex();\n                    if (vertex != null) {\n                        mutableGraph.addVertex(0, vertex);\n                    }\n                    List<IEdge<Integer, Integer>> edges = temporaryGraph.getEdges();\n                    if (edges != null) {\n                        for (IEdge<Integer, Integer> edge : edges) {\n                            mutableGraph.addEdge(0, edge);\n                        }\n                    }\n                }\n\n                @Override\n                public void init(ITraversalRequest<Integer> traversalRequest) {\n                    int requestId = traversalRequest.getVId();\n                    List<IEdge<Integer, Integer>> edges =\n                        this.vertexCentricFuncContext.getHistoricalGraph().getSnapShot(0).edges().getEdges();\n                    int sum = 0;\n                    if (edges != null) {\n                        for (IEdge<Integer, Integer> edge : edges) {\n                            sum += edge.getValue();\n                        }\n                    }\n                    this.vertexCentricFuncContext.takeResponse(new TraversalResponse(requestId, sum));\n                }\n\n                @Override\n                public void compute(Integer vertexId, Iterator<Integer> messageIterator) {\n                }\n\n                @Override\n                public void finish(Integer vertexId,\n                                   MutableGraph<Integer, Integer, Integer> mutableGraph) {\n                }\n            };\n        }\n        @Override\n        public VertexCentricCombineFunction<Integer> getCombineFunction() {\n            return null;\n        }\n    }\n\n    static class TraversalResponse implements ITraversalResponse<Integer> {\n\n        private long responseId;\n\n        private int value;\n\n        public TraversalResponse(long responseId, int value) {\n            this.responseId = responseId;\n            this.value = value;\n        }\n        @Override\n        public long getResponseId() {\n            return responseId;\n        }\n        @Override\n        public Integer getResponse() {\n            return value;\n        }\n        @Override\n        public ResponseType getType() {\n            return ResponseType.Vertex;\n        }\n        @Override\n        public String toString() {\n            return responseId + "," + value;\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u9759\u6001\u56fe",children:"\u9759\u6001\u56fe"}),"\n",(0,t.jsx)(n.h3,{id:"\u63a5\u53e3-1",children:"\u63a5\u53e3"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"API"}),(0,t.jsx)(n.th,{children:"\u63a5\u53e3\u8bf4\u660e"}),(0,t.jsx)(n.th,{children:"\u5165\u53c2\u8bf4\u660e"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"void open(VertexCentricTraversalFuncContext<K, VV, EV, M, R> vertexCentricFuncContext)"}),(0,t.jsx)(n.td,{children:"vertexCentric function\u8fdb\u884copen\u64cd\u4f5c"}),(0,t.jsx)(n.td,{children:"vertexCentricFuncContext\uff1aK\u8868\u793avertexId\u7684\u7c7b\u578b\uff0cVV\u8868\u793avertex value\u7c7b\u578b\uff0cEV\u8868\u793aedge value\u7c7b\u578b\uff0cM\u8868\u793a\u56fe\u904d\u5386\u4e2d\u5b9a\u4e49\u7684\u6d88\u606f\u7c7b\u578b\uff0cR\u8868\u793a\u904d\u5386\u7ed3\u679c\u7c7b\u578b\u3002"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"void init(ITraversalRequest traversalRequest)"}),(0,t.jsx)(n.td,{children:"\u56fe\u904d\u5386\u521d\u59cb\u5316\u63a5\u53e3"}),(0,t.jsx)(n.td,{children:"traversalRequest\uff1a\u56fe\u904d\u5386\u89e6\u53d1\u70b9\uff0c\u5176\u4e2dK\u8868\u793avertex id\u7684\u7c7b\u578b\u3002"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"void compute(K vertexId, Iterator messageIterator)"}),(0,t.jsx)(n.td,{children:"\u56fe\u904d\u5386\u63a5\u53e3"}),(0,t.jsxs)(n.td,{children:["vertexId\uff1a\u5f53\u524d\u8ba1\u7b97\u70b9\u7684id\uff0c\u5176\u4e2dK\u8868\u793avertex id\u7684\u7c7b\u578b\u3002",(0,t.jsx)(n.br,{}),"messageIterator\uff1a\u56fe\u904d\u5386\u8fc7\u7a0b\u4e2d\u6240\u6709\u53d1\u9001\u7ed9\u5f53\u524dvertex\u7684\u6d88\u606f\uff0c\u5176\u4e2dM\u8868\u793a\u904d\u5386\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u5b9a\u4e49\u7684\u53d1\u9001\u6d88\u606f\u7c7b\u578b\u3002"]})]})]})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u8be6\u7ec6\u63a5\u53e3"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public interface VertexCentricTraversalFunction<K, VV, EV, M, R> extends VertexCentricFunction<K, VV\n    , EV, M> {\n\n    void open(VertexCentricTraversalFuncContext<K, VV, EV, M, R> vertexCentricFuncContext);\n\t/** \u56fe\u904d\u5386\u7b97\u6cd5\u521d\u59cb\u5316\u65b9\u6cd5 */\n    void init(ITraversalRequest<K> traversalRequest);\n\t/** \u5b9e\u73b0\u56fe\u904d\u5386\u903b\u8f91 */\n    void compute(K vertexId, Iterator<M> messageIterator);\n\n    void finish();\n\n    void close();\n\t\n    interface VertexCentricTraversalFuncContext<K, VV, EV, M, R> extends VertexCentricFuncContext<K,\n        VV, EV, M> {\n    \t/** \u83b7\u53d6\u56fe\u904d\u5386\u7ed3\u679c */\n        void takeResponse(ITraversalResponse<R> response);\n    \t/** \u83b7\u53d6\u5f00\u59cb\u56fe\u904d\u5386\u7684\u70b9 */\n        TraversalVertexQuery<K, VV> vertex();\n    \t/** \u83b7\u53d6\u5f00\u59cb\u56fe\u904d\u5386\u7684\u8fb9 */\n        TraversalEdgeQuery<K, EV> edges();\n\n        void broadcast(IGraphMessage<K, M> message);\n    }\n\n    interface TraversalVertexQuery<K, VV> extends VertexQuery<K, VV> {\n    \t/** \u83b7\u53d6\u56fe\u904d\u5386\u4e2d\u70b9\u7684\u8fed\u4ee3\u5668 */\n        Iterator<K> loadIdIterator();\n    }\n\n    interface TraversalEdgeQuery<K, EV> extends EdgeQuery<K, EV> {\n    \t/** \u901a\u8fc7\u6307\u5b9a\u7684\u70b9id\uff0c\u83b7\u53d6\u5bf9\u5e94\u7684\u56fe\u904d\u5386\u8d77\u70b9 */\n        TraversalEdgeQuery<K, EV> withId(K vertexId);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u793a\u4f8b-1",children:"\u793a\u4f8b"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class StaticGraphTraversalAllExample {\n    private static final Logger LOGGER =\n            LoggerFactory.getLogger(StaticGraphTraversalAllExample.class);\n\n    public static void main(String[] args) {\n        Environment environment = EnvironmentFactory.onLocalEnvironment();\n        Pipeline pipeline = PipelineFactory.buildPipeline(environment);\n        pipeline.submit(new PipelineTask() {\n            @Override\n            public void execute(IPipelineTaskContext pipelineTaskCxt) {\n                PWindowSource<IVertex<Integer, Integer>> prVertices =\n                        pipelineTaskCxt.buildSource(new FileSource<>("data/input/email_vertex",\n                                line -> {\n                                    String[] fields = line.split(",");\n                                    IVertex<Integer, Integer> vertex = new ValueVertex<>(Integer.valueOf(fields[0]),\n                                            Integer.valueOf(fields[1]));\n                                    return Collections.singletonList(vertex);\n                                }), AllWindow.getInstance()).withParallelism(1);\n\n                PWindowSource<IEdge<Integer, Integer>> prEdges =\n                        pipelineTaskCxt.buildSource(new FileSource<>("data/input/email_edge",\n                                line -> {\n                                    String[] fields = line.split(",");\n                                    IEdge<Integer, Integer> edge = new ValueEdge<>(Integer.valueOf(fields[0]),\n                                            Integer.valueOf(fields[1]), 1);\n                                    return Collections.singletonList(edge);\n                                }), AllWindow.getInstance()).withParallelism(1);\n\n                GraphViewDesc graphViewDesc = GraphViewBuilder\n                        .createGraphView(GraphViewBuilder.DEFAULT_GRAPH)\n                        .withShardNum(1)\n                        .withBackend(BackendType.Memory)\n                        .build();\n\n                PGraphWindow<Integer, Integer, Integer> graphWindow =\n                        pipelineTaskCxt.buildWindowStreamGraph(prVertices, prEdges, graphViewDesc);\n\n                graphWindow.traversal(new VertexCentricTraversal<Integer, Integer, Integer, Integer, Integer>(3) {\n                    @Override\n                    public VertexCentricTraversalFunction<Integer, Integer, Integer, Integer,\n                            Integer> getTraversalFunction() {\n                        return new VertexCentricTraversalFunction<Integer, Integer, Integer, Integer, Integer>() {\n\n                            private VertexCentricTraversalFuncContext<Integer, Integer, Integer, Integer, Integer> vertexCentricFuncContext;\n\n                            @Override\n                            public void open(\n                                    VertexCentricTraversalFuncContext<Integer, Integer, Integer, Integer, Integer> vertexCentricFuncContext) {\n                                this.vertexCentricFuncContext = vertexCentricFuncContext;\n                            }\n\n                            @Override\n                            public void init(ITraversalRequest<Integer> traversalRequest) {\n                                this.vertexCentricFuncContext.takeResponse(\n                                        new TraversalResponse(traversalRequest.getRequestId(), 1));\n                            }\n                            @Override\n                            public void compute(Integer vertexId, Iterator<Integer> messageIterator) {\n                            }\n                            @Override\n                            public void finish() {\n                            }\n                            @Override\n                            public void close() {\n                            }\n                        };\n                    }\n\n                    @Override\n                    public VertexCentricCombineFunction<Integer> getCombineFunction() {\n                        return null;\n                    }\n                }).start().sink(v -> {});\n            }\n        });\n\n        IPipelineResult result = pipeline.execute();\n        result.get();\n    }\n    public static class TraversalResponse implements ITraversalResponse<Integer> {\n        private long responseId;\n        private int response;\n        public TraversalResponse(long responseId, int response) {\n            this.responseId = responseId;\n            this.response = response;\n        }\n\n        @Override\n        public long getResponseId() {\n            return responseId;\n        }\n\n        @Override\n        public Integer getResponse() {\n            return response;\n        }\n\n        @Override\n        public ResponseType getType() {\n            return ResponseType.Vertex;\n        }\n\n        @Override\n        public String toString() {\n            return "TraversalResponse{" + "responseId=" + responseId + ", response=" + response\n                    + \'}\';\n        }\n    }\n\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(6540);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);