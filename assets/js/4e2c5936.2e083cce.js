"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6234],{295:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/task_detail_en-6dc31bc783eea924f7eb9c05637c8f7f.png"},2249:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/demo_job_en-85c690bff3dbc599f2996c1afea88595.png"},2691:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/install_container_en-c4fee775004763515893b39d13d7ecfa.png"},2933:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/demo_job_detail_en-7fe8ea81e08875b99e8bdb0bdd4e96cc.png"},3658:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/install_jar_config_en-e00a4d43ceac4750347c5fd9fdf9cdab.png"},4966:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/install_storage_config_en-db99b27c254aea0473cbd974476b5873.png"},5060:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/install_container_meta_config_en-fce2201c948fdf2cb2d2cb066d66a3af.png"},6104:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/docker_pref-12f13cfa6094fbaa8703d45c18b249a7.png"},8242:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=t(4848),i=t(8453);const a={},l="Quick Start(Running in GeaFlow Console)",o={id:"quick_start/quick_start_docker",title:"Quick Start(Running in GeaFlow Console)",description:"Prepare",source:"@site/../docs-en/source/3.quick_start/2.quick_start_docker.md",sourceDirName:"3.quick_start",slug:"/quick_start/quick_start_docker",permalink:"/tugraph-analytics/en/quick_start/quick_start_docker",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quick Start (Running in Local)",permalink:"/tugraph-analytics/en/quick_start/quick_start"},next:{title:"Glossary",permalink:"/tugraph-analytics/en/concepts/glossary"}},r={},c=[{value:"Prepare",id:"prepare",level:2},{value:"Running Job in Docker",id:"running-job-in-docker",level:2},{value:"K8S Deployment",id:"k8s-deployment",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"quick-startrunning-in-geaflow-console",children:"Quick Start(Running in GeaFlow Console)"})}),"\n",(0,s.jsx)(n.h2,{id:"prepare",children:"Prepare"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Install Docker and adjust Docker service resource settings (Dashboard-Settings-Resources), then start Docker service:"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"docker_pref",src:t(6104).A+"",width:"2500",height:"1440"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Pull GeaFlow Image"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Run the following command to pull the remote geaflow console image:"}),"\n",(0,s.jsx)(n.p,{children:"For x86 architecture pull x86 image:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker pull tugraph/geaflow-console:<version>\n"})}),"\n",(0,s.jsx)(n.p,{children:"If it is arm architecture, pull the arm image:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker pull tugraph/geaflow-console-arm:<version>\n"})}),"\n",(0,s.jsx)(n.p,{children:"If the pull fails due to network problems, you can also run the following command to directly build the local image\n(before building the image, start the docker container, and the build the script to build the image of the\ncorresponding type based on the machine type):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/TuGraph-family/tugraph-analytics.git\ncd tugraph-analytics/\n./build.sh --module=geaflow-console\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"The entire compilation process may take some time, please be patient. After the image compilation is successful, use\nthe following command to view the image."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker images\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The name of the remotely pulled image is: ",(0,s.jsx)(n.strong,{children:"tugraph/geaflow-console:0.1"}),"(x86 architecture) or ",(0,s.jsx)(n.strong,{children:"tugraph/\ngeaflow-console-arm :0.1"}),"(arm architecture)\n. The name of the local image is ",(0,s.jsx)(n.strong,{children:"geaflow-console:0.1"}),". You only need to select one method to build the image."]}),"\n",(0,s.jsx)(n.h2,{id:"running-job-in-docker",children:"Running Job in Docker"}),"\n",(0,s.jsx)(n.p,{children:"Below is an introduction on running the flow graph job mentioned in Local Mode Execution inside a docker container."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Start the GeaFlow Console service locally."}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For the Remote Image:"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"x86 architecture"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker run -d --name geaflow-console -p 8888:8888 tugraph/geaflow-console:0.1\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"arm Architecture"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker run -d --name geaflow-console -p 8888:8888 tugraph/geaflow-console-arm:0.1\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For the Local Image"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker run -d --name geaflow-console -p 8888:8888 geaflow-console:0.1\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": The tag name of the remote image is different from that of the local build image, and the startup\ncommand is different."]}),"\n",(0,s.jsxs)(n.p,{children:["Enter the container and wait for the Java process to start. After that, access ",(0,s.jsx)(n.a,{href:"http://localhost:8888",children:"localhost:8888"})," to enter the GeaFlow Console platform page."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"> docker exec -it geaflow-console tailf /tmp/logs/geaflow/app-default.log\n\n# wait the logs below and open url http://localhost:8888\nGeaflowApplication:61   - Started GeaflowApplication in 11.437 seconds (JVM running for 13.475)\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Register Account"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The first registered user will be set as the default administrator. Log in as an administrator and use the one-click installation feature to start system initialization."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"install_welcome",src:t(9876).A+"",width:"1115",height:"644"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Config GeaFlow"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"GeaFlow requires configuration of runtime environment settings during its initial run, including cluster settings, runtime settings, data storage settings, and file storage settings."}),"\n",(0,s.jsx)(n.p,{children:"3.1 Cluster Config"}),"\n",(0,s.jsx)(n.p,{children:'Click "Next" and use the default Container mode, which is local container mode.'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"install_container",src:t(2691).A+"",width:"2552",height:"491"})}),"\n",(0,s.jsx)(n.p,{children:"3.2 Runtime Config"}),"\n",(0,s.jsx)(n.p,{children:'For local runtime mode, you can skip this step and use the default system settings by clicking "Next" directly.'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"install_conainer_meta_config.png",src:t(5060).A+"",width:"2548",height:"935"})}),"\n",(0,s.jsx)(n.p,{children:"3.3 Storage Config"}),"\n",(0,s.jsx)(n.p,{children:'Select the graph data storage location. For local mode, select LOCAL and enter a local directory. If you don\'t need to fill it out, click "Next" directly.'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"install_storage_config",src:t(4966).A+"",width:"2548",height:"506"})}),"\n",(0,s.jsx)(n.p,{children:"3.4 File Config"}),"\n",(0,s.jsx)(n.p,{children:'This configuration is for the persistent storage of GeaFlow engine JAR and user JAR files, such as in HDFS. For local runtime mode, it is the same as the data storage configuration, so select LOCAL mode and enter a local directory. If you don\'t need to fill it out, click "Next" directly.'}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{alt:"install_jar_config",src:t(3658).A+"",width:"2543",height:"500"}),"\nAfter completing the configuration, click the one-click installation button. After successful installation, the administrator will automatically switch to the default instance under the personal tenant and can directly create and publish graph computing tasks."]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Submit compute job"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Go to the ",(0,s.jsx)(n.code,{children:"DEVELOPMENT"})," page, Console has automatically created a demo job after starting (The loop detection job in\n",(0,s.jsx)(n.a,{href:"/tugraph-analytics/en/quick_start/quick_start",children:"Local Demo"}),"), shown as follows."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"create_job",src:t(2249).A+"",width:"3872",height:"830"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"add_dsl_job",src:t(2933).A+"",width:"2172",height:"2172"})}),"\n",(0,s.jsxs)(n.p,{children:["Click the ",(0,s.jsx)(n.code,{children:'"Publish"'})," button to publish the job."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"add_dsl_job",src:t(9855).A+"",width:"3874",height:"836"})}),"\n",(0,s.jsxs)(n.p,{children:["Then go to the Job Management page and click the ",(0,s.jsx)(n.code,{children:'"Submit"'})," button to submit the task for execution."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"task_detail",src:t(295).A+"",width:"3414",height:"1616"})}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsxs)(n.li,{children:["After running, you can find the result file in the output path in docker (the default path is:\n",(0,s.jsx)(n.code,{children:"/tmp/geaflow/demo_job_result"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"2,3,4,1,2\n4,1,2,3,4\n3,4,1,2,3\n1,2,3,4,1\n"})}),"\n",(0,s.jsx)(n.h2,{id:"k8s-deployment",children:"K8S Deployment"}),"\n",(0,s.jsxs)(n.p,{children:["GeaFlow supports K8S deployment. For details about the deployment mode, see the document: ",(0,s.jsx)(n.a,{href:"/tugraph-analytics/en/deploy/install_guide",children:"K8S Deployment"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:n},e.children)}},9855:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/publish_job_en-ee8f1d2fdb3ea11eca190291daa89700.png"},9876:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/install_welcome_en-3385caa7132f1029c911f950b98c74f3.png"}}]);