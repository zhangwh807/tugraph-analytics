"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9534],{8453:(n,e,o)=>{o.d(e,{R:()=>a,x:()=>l});var t=o(6540);const i={},r=t.createContext(i);function a(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),t.createElement(r.Provider,{value:e},n.children)}},9463:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var t=o(4848),i=o(8453);const r={},a="\u81ea\u5b9a\u4e49Connector",l={id:"application-development/connector/udc",title:"\u81ea\u5b9a\u4e49Connector",description:"GeaFlow \u652f\u6301\u4f7f\u7528Java SPI\u65b9\u5f0f\u5b9a\u4e49\u7528\u6237\u81ea\u5b9a\u4e49Connector\u3002",source:"@site/../docs-cn/source/5.application-development/3.connector/10.udc.md",sourceDirName:"5.application-development/3.connector",slug:"/application-development/connector/udc",permalink:"/tugraph-analytics/zh/application-development/connector/udc",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pulsar Connector\u4ecb\u7ecd",permalink:"/tugraph-analytics/zh/application-development/connector/pulsar"},next:{title:"Text2GQL\u8bed\u6cd5\u63d0\u793a\u624b\u518c",permalink:"/tugraph-analytics/zh/application-development/chat_guide"}},c={},s=[{value:"\u63a5\u53e3",id:"\u63a5\u53e3",level:2},{value:"\u8868Connector",id:"\u8868connector",level:3},{value:"TableSource",id:"tablesource",level:2},{value:"TableSink",id:"tablesink",level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:2},{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0",level:3},{value:"\u7528\u6cd5",id:"\u7528\u6cd5",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"\u81ea\u5b9a\u4e49connector",children:"\u81ea\u5b9a\u4e49Connector"})}),"\n",(0,t.jsx)(e.p,{children:"GeaFlow \u652f\u6301\u4f7f\u7528Java SPI\u65b9\u5f0f\u5b9a\u4e49\u7528\u6237\u81ea\u5b9a\u4e49Connector\u3002"}),"\n",(0,t.jsx)(e.h2,{id:"\u63a5\u53e3",children:"\u63a5\u53e3"}),"\n",(0,t.jsx)(e.h3,{id:"\u8868connector",children:"\u8868Connector"}),"\n",(0,t.jsx)(e.p,{children:"\u7528\u6237\u5e94\u8be5\u5b9e\u73b0\u4e00\u4e2a TableConnector \u63a5\u53e3\u3002\u6211\u4eec\u652f\u6301\u4f7f\u7528 TableReadableConnector \u7528\u4e8e\u8bfb\u53d6\u6570\u636e\uff0c\u4f7f\u7528 TableWritableConnector \u7528\u4e8e\u5199\u5165\u6570\u636e\u3002\u5982\u679c\u4e24\u4e2a\u63a5\u53e3\u90fd\u5b9e\u73b0\u4e86\uff0c\u8fde\u63a5\u5668\u5c06\u540c\u65f6\u652f\u6301\u8bfb\u548c\u5199\u64cd\u4f5c\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"/**\n * The interface for table connector.\n */\npublic interface TableConnector {\n\n    /**\n     * Return table connector type.\n     */\n    String getType();\n}\n\n/**\n * A readable table connector.\n */\npublic interface TableReadableConnector extends TableConnector {\n\n    TableSource createSource(Configuration conf);\n}\n\n/**\n * A writable table connector.\n */\npublic interface TableWritableConnector extends TableConnector {\n\n    /**\n     * Create the {@link TableSink} for the table connector.\n     */\n    TableSink createSink(Configuration conf);\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"tablesource",children:"TableSource"}),"\n",(0,t.jsx)(e.p,{children:"TableSource \u63a5\u53e3\u7528\u4e8e\u4ece\u8fde\u63a5\u5668\u4e2d\u8bfb\u53d6\u6570\u636e\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"/**\n * Interface for table source.\n */\npublic interface TableSource extends Serializable {\n\n    /**\n     * The init method for compile time.\n     */\n    void init(Configuration tableConf, TableSchema tableSchema);\n\n    /**\n     * The init method for runtime.\n     */\n    void open(RuntimeContext context);\n\n    /**\n     * List all the partitions for the source.\n     */\n    List<Partition> listPartitions();\n\n    /**\n     * Returns the {@link TableDeserializer} for the source to convert data read from\n     * the source to {@link Row}.\n     */\n    <IN> TableDeserializer<IN> getDeserializer(Configuration conf);\n\n    /**\n     * Fetch data for the partition from start offset. if the windowSize is -1, it represents an\n     * all-window which will read all the data from the source, else return widow size for data.\n     */\n    <T> FetchData<T> fetch(Partition partition, Optional<Offset> startOffset, long windowSize) throws IOException;\n\n    /**\n     * The close callback for the job finish the execution.\n     */\n    void close();\n}\n\n"})}),"\n",(0,t.jsx)(e.h2,{id:"tablesink",children:"TableSink"}),"\n",(0,t.jsx)(e.p,{children:"TableSink \u63a5\u53e3\u7528\u4e8e\u5c06\u6570\u636e\u5199\u5165\u8fde\u63a5\u5668\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"/**\n * Interface for table sink.\n */\npublic interface TableSink extends Serializable {\n\n    /**\n     * The init method for compile time.\n     */\n    void init(Configuration tableConf, StructType schema);\n\n    /**\n     * The init method for runtime.\n     */\n    void open(RuntimeContext context);\n\n    /**\n     * The write method for writing row to the table.\n     */\n    void write(Row row) throws IOException;\n\n    /**\n     * The finish callback for each window finished.\n     */\n    void finish() throws IOException;\n\n    /**\n     * The close callback for the job finish the execution.\n     */\n    void close();\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u793a\u4f8b",children:"\u793a\u4f8b"}),"\n",(0,t.jsx)(e.p,{children:"\u4e0b\u9762\u662f\u4e00\u4e2a\u7528\u4e8e\u63a7\u5236\u53f0\u7684Table Connector\u7684\u793a\u4f8b\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"\u5b9e\u73b0",children:"\u5b9e\u73b0"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'public class ConsoleTableConnector implements TableWritableConnector {\n\n    @Override\n    public String getType() {\n        return "CONSOLE";\n    }\n\n    @Override\n    public TableSink createSink(Configuration conf) {\n        return new ConsoleTableSink();\n    }\n}\n\npublic class ConsoleTableSink implements TableSink {\n\n    private static final Logger LOGGER = \n\t\t\tLoggerFactory.getLogger(ConsoleTableSink.class);\n\n    private boolean skip;\n\n    @Override\n    public void init(Configuration tableConf, StructType schema) {\n        skip = tableConf.getBoolean(ConsoleConfigKeys.GEAFLOW_DSL_CONSOLE_SKIP);\n    }\n\n    @Override\n    public void open(RuntimeContext context) {\n\n    }\n\n    @Override\n    public void write(Row row) {\n        if (!skip) {\n            LOGGER.info(row.toString());\n        }\n    }\n\n    @Override\n    public void finish() {\n\n    }\n\n    @Override\n    public void close() {\n\n    }\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u5728\u5b9e\u73b0\u4e86 ConsoleTableConnector \u540e\uff0c\u60a8\u9700\u8981\u5c06\u5b8c\u6574\u7684\u7c7b\u540d\u6dfb\u52a0\u5230 resources/META-INF.services/com.antgroup.geaflow.dsl.connector.api.\nTableConnector \u6587\u4ef6\u4e2d\u3002\u8be5\u6587\u4ef6\u5e94\u5217\u51fa\u6240\u6709\u5b9e\u73b0\u4e86 TableConnector \u63a5\u53e3\u7684\u8fde\u63a5\u5668\u7c7b\u7684\u5168\u540d\uff0c\u4ee5\u4fbf GeaFlow \u5728\u542f\u52a8\u65f6\u80fd\u591f\u626b\u63cf\u5230\u8fd9\u4e9b\u7c7b\uff0c\u5e76\u5c06\u5b83\u4eec\u6ce8\u518c\u4e3a\u53ef\u7528\u7684Connector\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"\u7528\u6cd5",children:"\u7528\u6cd5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE file_source (\n  id BIGINT,\n  name VARCHAR,\n  age INT\n) WITH (\n    type='file',\n    geaflow.dsl.file.path = '/path/to/file'\n);\n\nCREATE TABLE console_sink (\n  id BIGINT,\n  name VARCHAR,\n  age INT\n) WITH (\n    type='console'\n);\n\nINSERT INTO console_sink\nSELECT * FROM file_source;\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}}}]);