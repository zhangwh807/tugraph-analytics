"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4107],{6256:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(4848),a=t(8453);const i={},s="Text2GQL Syntax Manual",o={id:"application-development/chat_guide",title:"Text2GQL Syntax Manual",description:"This manual enumerates common syntax elements of GQL along with reference prompts, enabling users to formulate GQL statements by referring to the provided example queries.",source:"@site/../docs-en/source/5.application-development/4.chat_guide.md",sourceDirName:"5.application-development",slug:"/application-development/chat_guide",permalink:"/tugraph-analytics/en/application-development/chat_guide",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"User Defined Connector",permalink:"/tugraph-analytics/en/application-development/connector/udc"},next:{title:"Kubernetes Cluster Deployment",permalink:"/tugraph-analytics/en/deploy/install_guide"}},d={},c=[];function h(e){const n={br:"br",h1:"h1",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"text2gql-syntax-manual",children:"Text2GQL Syntax Manual"})}),"\n",(0,r.jsx)(n.p,{children:"This manual enumerates common syntax elements of GQL along with reference prompts, enabling users to formulate GQL statements by referring to the provided example queries."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Syntax"}),(0,r.jsx)(n.th,{children:"Query Example"}),(0,r.jsx)(n.th,{children:"Result"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Find Vertex"}),(0,r.jsx)(n.td,{children:"Locate vertices of type person"}),(0,r.jsx)(n.td,{children:"match(a:person) return a"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Find Edge"}),(0,r.jsx)(n.td,{children:"Return all edges labeled as knows"}),(0,r.jsx)(n.td,{children:"match(a)-[e:knows]->(b) return e"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Find Relationships"}),(0,r.jsxs)(n.td,{children:["Query 10 universities located in Beijing",(0,r.jsx)(n.br,{}),"Identify 5 students related to Teacher Xiao Zhang"]}),(0,r.jsxs)(n.td,{children:["match(a:city where a.name = '\u5317\u4eac')<-[:belong]-(b:university) return b limit 10",(0,r.jsx)(n.br,{}),"match(a:teacher where a.name='Xiao Zhang')-[e]-(b:student) return b limit 5"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Find Multi-Degree Relationships"}),(0,r.jsxs)(n.td,{children:["Find people known by friends of Student Xiao Wang",(0,r.jsx)(n.br,{}),"Retrieve departments connected to universities, then students linked to those departments, and courses chosen by those students",(0,r.jsx)(n.br,{}),"Identify software co-created by Tencent and Google, return 5 results"]}),(0,r.jsxs)(n.td,{children:["match(a:student where a.name = 'Xiao Wang')-[e:friend]->(b)-[e2:knows]->(c:person) return c",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"match(a:company where a.name='Tencent')-[e:creates]->(b:software)<-[e2:creates]-(c:company where c.name='Google') return b.name limit 5"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Loop"}),(0,r.jsx)(n.td,{children:"From person Zhang Siqi, traverse through pay edges, reach vertices within 2 to 4 degrees"}),(0,r.jsx)(n.td,{children:"match(a:person where a.name='Zhang Siqi')-[e:pay]->{2,4}(b:person) return b"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Loop"}),(0,r.jsx)(n.td,{children:"Identify 3-hop cycles involving persons who know Li Hong"}),(0,r.jsxs)(n.td,{children:["match(a:person where name = 'Li Hong')-[e:knows]->{1,2}(b)->(a) return a.id, b.id as b_id",(0,r.jsx)(n.br,{})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Filter Criteria"}),(0,r.jsxs)(n.td,{children:["Find people known by Xiaohong, aged over 20, earning more than 5000",(0,r.jsx)(n.br,{}),"Fetch 10 nodes not female, shorter than 160cm, or with an id greater than 5"]}),(0,r.jsxs)(n.td,{children:["match(a:person where a.name='Xiaohong')-[e:knows]->(b:person where b.age > 20 and b.salary > 5000) return b",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"match(a where (a.gender <> 'female' and a.height < 160) or a.id > 5) return a limit 10"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Let Single Value"}),(0,r.jsx)(n.td,{children:"Query software created by Ant Group, set minPrice of software equal to its minimum price, return company id and software's minPrice"}),(0,r.jsx)(n.td,{children:"match(a:company where a.name = 'Ant Group')-[e:creates]->(b:software) let b.minPrice = MIN(b.price) return a.id, b.minPrice"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Let Subquery"}),(0,r.jsxs)(n.td,{children:["Find employees of Ant Group, set their countSalary equal to the sum of salaries of those who know them, then find the software they purchase",(0,r.jsx)(n.br,{}),"Identify the country that city id 10 belongs to, assign the average count of companies related to the country as avgCnt"]}),(0,r.jsxs)(n.td,{children:["match(a:company where a.name = 'Ant Group')-[e:employee]->(b:person) let b.countSalary = SUM((b:person)<-[e2:knows]-(c:person) => c.salary) match(b:person)-[e3:buy]->(d:software) return b.countSalary, d",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"match(a:city where id = '10')-[e:belong]->(b:country)<-[e2:belong]-(c:company) let b.avgCnt = AVG(c.peopleNumber) return b"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Function Call"}),(0,r.jsx)(n.td,{children:"Invoke SSSP function with 'arg1', 10 as inputs, return id and distance"}),(0,r.jsx)(n.td,{children:"match(a:person) call sssp(a, 10) yield (id, distance) return id, distance"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"order"}),(0,r.jsx)(n.td,{children:"Return software created by companies, sorted by company scale descending and software price ascending"}),(0,r.jsx)(n.td,{children:"match(a:company)-[e:creates]->(b:software) return a.scale,b.price order by a.scale desc, b.price asc"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"group by"}),(0,r.jsxs)(n.td,{children:["Find people known by Xiaohong, grouped by gender, return max salary",(0,r.jsx)(n.br,{}),"For Peking University affiliates, return the average count of people per company, grouped by company scale"]}),(0,r.jsxs)(n.td,{children:["match(a:person where person.name = 'Xiaohong')-[e:knows]->(b:person) return MAX(b.salary) group by b.gender",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"match(a:university where a.name='\u5317\u4eac\u5927\u5b66')-[e]-(b:company) return AVG(b.peopleNumber) group by b.scale"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"join"}),(0,r.jsxs)(n.td,{children:["Find all people liked by Zheng Wei and all who know him, return together",(0,r.jsx)(n.br,{}),"Find schools related to person Alice, denote as X, further find companies and persons associated with X"]}),(0,r.jsxs)(n.td,{children:["match(a:person where a.name = 'Zheng Wei')-[e:likes]->(b:person),(a:person where a.name = 'Zheng Wei')<-[e2:knows]-(c:person) return a, b, c",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"match(a:person where a.name = 'alice')-[e]-(b:school), (b:school)-[e2]-(c:company),(b:school)-[e3]-(d:person) return a, b, c, d"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Schema Query with Graph (Automatically appended in Console)"}),(0,r.jsx)(n.td,{children:"Using this graph schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));Find comments created by Sun Mei and liked by Sun Jiancong, return all"}),(0,r.jsx)(n.td,{children:"match(a:person where a.name = 'Sun Mei')-[e:person_creates_comment]->(b:comment),(c:person where c.name = 'Sun Jiancong')-[e2:person_likes_comment]->(d:comment)return a, b, c, d"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Multi-Query with Graph Schema"}),(0,r.jsx)(n.td,{children:'Using this graph schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));Execute 4 queries: 1. Writers known by Huang Jiacong; 2. Edges labeled author_knows_author; 3. IDs of books related to "Computer Networks"; 4. 152 books related to both He Xue and Zhang Jiancong'}),(0,r.jsx)(n.td,{children:"Queries:1: match(a:author)<-[e:author_knows_author]-(b:author where b.name='Huang Jiacong') return a, b;2: match(a:author)-[e:author_knows_author]->(b:author) return e;3: match(a:book where a.name='Computer Networks')-[e]-(b:book) return b.id;4: match(a where a.name='He Xue')-[e]->(b:book)<-[e2]-(c where c.name='Zhang Jiancong') return b limit 152;"})]})]})]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);