"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9676],{3861:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(4848),i=t(8453);const a={},l="\u7b80\u4ecb",o={id:"application-development/api/overview",title:"\u7b80\u4ecb",description:"GeaFlow API\u662f\u5bf9\u9ad8\u9636\u7528\u6237\u63d0\u4f9b\u7684\u5f00\u53d1\u63a5\u53e3\uff0c\u5176\u652f\u6301Graph API\u548cStream API\u4e24\u79cd\u7c7b\u578b\uff1a",source:"@site/../docs-cn/source/5.application-development/1.api/1.overview.md",sourceDirName:"5.application-development/1.api",slug:"/application-development/api/overview",permalink:"/tugraph-analytics/zh/application-development/api/overview",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Console\u5e73\u53f0\u4ecb\u7ecd",permalink:"/tugraph-analytics/zh/concepts/console_principle"},next:{title:"Source API\u4ecb\u7ecd",permalink:"/tugraph-analytics/zh/application-development/api/stream/source"}},s={},c=[{value:"Maven\u4f9d\u8d56",id:"maven\u4f9d\u8d56",level:2},{value:"\u529f\u80fd\u6982\u89c8",id:"\u529f\u80fd\u6982\u89c8",level:2},{value:"Graph API",id:"graph-api",level:3},{value:"Stream API",id:"stream-api",level:3},{value:"\u5178\u578b\u793a\u4f8b",id:"\u5178\u578b\u793a\u4f8b",level:2},{value:"PageRank\u52a8\u6001\u56fe\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",id:"pagerank\u52a8\u6001\u56fe\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",level:3},{value:"PageRank\u7684\u5b9a\u4e49",id:"pagerank\u7684\u5b9a\u4e49",level:4},{value:"\u5b9e\u4f8b\u4ee3\u7801",id:"\u5b9e\u4f8b\u4ee3\u7801",level:4},{value:"PageRank\u9759\u6001\u56fe\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",id:"pagerank\u9759\u6001\u56fe\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",level:3},{value:"\u5b9e\u4f8b\u4ee3\u7801",id:"\u5b9e\u4f8b\u4ee3\u7801-1",level:4},{value:"WordCount\u6279\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",id:"wordcount\u6279\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",level:3},{value:"\u5b9e\u4f8b\u4ee3\u7801",id:"\u5b9e\u4f8b\u4ee3\u7801-2",level:4},{value:"KeyAgg\u6d41\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",id:"keyagg\u6d41\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",level:3},{value:"\u5b9e\u4f8b\u4ee3\u7801",id:"\u5b9e\u4f8b\u4ee3\u7801-3",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\u7b80\u4ecb",children:"\u7b80\u4ecb"})}),"\n",(0,r.jsx)(n.p,{children:"GeaFlow API\u662f\u5bf9\u9ad8\u9636\u7528\u6237\u63d0\u4f9b\u7684\u5f00\u53d1\u63a5\u53e3\uff0c\u5176\u652f\u6301Graph API\u548cStream API\u4e24\u79cd\u7c7b\u578b\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Graph API\uff1aGraph\u662fGeaFlow\u6846\u67b6\u7684\u4e00\u7b49\u516c\u6c11\uff0c\u5f53\u524dGeaFlow\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u5957\u57fa\u4e8eGraphView\u7684\u56fe\u8ba1\u7b97\u7f16\u7a0b\u63a5\u53e3\uff0c\u5305\u542b\u56fe\u6784\u5efa\u3001\u56fe\u8ba1\u7b97\u53ca\u904d\u5386\u3002\u5728GeaFlow\u4e2d\u652f\u6301Static Graph\u548cDynamic Graph\u4e24\u79cd\u7c7b\u578b\u3002\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Static Graph API\uff1a\u9759\u6001\u56fe\u8ba1\u7b97API\uff0c\u57fa\u4e8e\u8be5\u7c7bAPI\u53ef\u4ee5\u8fdb\u884c\u5168\u91cf\u7684\u56fe\u8ba1\u7b97\u6216\u56fe\u904d\u5386\u3002"}),"\n",(0,r.jsxs)(n.li,{children:["Dynamic Graph API\uff1a\u52a8\u6001\u56fe\u8ba1\u7b97API\uff0cGeaFlow\u4e2dGraphView\u662f\u52a8\u6001\u56fe\u7684\u6570\u636e\u62bd\u8c61\uff0c\u57fa\u4e8eGraphView\u4e4b\u4e0a\uff0c\u53ef\u4ee5\u8fdb\u884c\u52a8\u6001\u56fe\u8ba1\u7b97\u6216\u56fe\u904d\u5386\u3002\u540c\u65f6\u652f\u6301\u5bf9Graphview\u751f\u6210Snapshot\u5feb\u7167\uff0c\u57fa\u4e8eSnapshot\u53ef\u4ee5\u63d0\u4f9b\u548cStatic Graph API\u4e00\u6837\u7684\u63a5\u53e3\u80fd\u529b\u3002\n",(0,r.jsx)(n.img,{alt:"api_arch",src:t(5488).A+"",width:"630",height:"331"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Stream API\uff1aGeaFlow\u63d0\u4f9b\u4e86\u4e00\u5957\u901a\u7528\u8ba1\u7b97\u7684\u7f16\u7a0b\u63a5\u53e3\uff0c\u5305\u62ecsource\u6784\u5efa\u3001\u6d41\u6279\u8ba1\u7b97\u53casink\u8f93\u51fa\u3002\u5728GeaFlow\u4e2d\u652f\u6301Batch\u548cStream\u4e24\u79cd\u7c7b\u578b\u3002\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Batch API\uff1a\u6279\u8ba1\u7b97API\uff0c\u57fa\u4e8e\u8be5\u7c7bAPI\u53ef\u4ee5\u8fdb\u884c\u6279\u91cf\u8ba1\u7b97\u3002"}),"\n",(0,r.jsx)(n.li,{children:"Stream API\uff1a\u6d41\u8ba1\u7b97API\uff0cGeaFlow\u4e2dStreamView\u662f\u52a8\u6001\u6d41\u7684\u6570\u636e\u62bd\u8c61\uff0c\u57fa\u4e8eStreamView\u4e4b\u4e0a\uff0c\u53ef\u4ee5\u8fdb\u884c\u6d41\u8ba1\u7b97\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u901a\u8fc7\u4e24\u79cd\u7c7b\u578bAPI\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770b\u5230\uff0cGeaFlow\u5185\u90e8\u901a\u8fc7View\u7edf\u4e00\u4e86\u56fe\u89c6\u56fe\u548c\u6d41\u89c6\u56fe\u8bed\u4e49\u3002\u540c\u65f6\u4e3a\u4e86\u7edf\u4e00\u652f\u6301\u52a8\u6001\u548c\u9759\u6001\u8ba1\u7b97\u4e24\u5957API\uff0cGeaFlow\u5185\u90e8\u62bd\u8c61\u4e86Window\u7684\u6982\u5ff5\uff0c\u5373\u4eceSource API\u5f00\u59cb\u5c31\u5fc5\u987b\u5e26\u6709Window\uff0c\u7528\u4ee5\u57fa\u4e8eWindow\u7684\u65b9\u5f0f\u5207\u5206\u6570\u636e\u7a97\u53e3\u3002"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u5bf9\u4e8e\u6d41\u6216\u52a8\u6001\u56feAPI\u6765\u8bf4\uff0cWindow\u53ef\u4ee5\u6309\u7167size\u6765\u5207\u5206\uff0c\u6bcf\u4e2a\u7a97\u53e3\u8bfb\u53d6\u4e00\u5b9asize\u7684\u6570\u636e\uff0c\u4ece\u800c\u5b9e\u73b0\u6d41\u5f0f\u589e\u91cf\u7684\u8ba1\u7b97\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5bf9\u4e8e\u6279\u6216\u9759\u6001\u56feAPI\u6765\u8bf4\uff0cWindow\u5c06\u91c7\u7528AllWindow\u6a21\u5f0f\uff0c\u4e00\u4e2a\u7a97\u53e3\u5c06\u8bfb\u53d6\u5168\u91cf\u6570\u636e\uff0c\u4ece\u800c\u5b9e\u73b0\u5168\u91cf\u7684\u8ba1\u7b97\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"maven\u4f9d\u8d56",children:"Maven\u4f9d\u8d56"}),"\n",(0,r.jsx)(n.p,{children:"\u5f00\u53d1GeaFlow API\u5e94\u7528\u9700\u8981\u6dfb\u52a0\u4e00\u4e0bmaven\u4f9d\u8d56\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.antgroup.tugraph</groupId>\n    <artifactId>geaflow-api</artifactId>\n    <version>0.1</version>\n</dependency>\n\n<dependency>\n    <groupId>com.antgroup.tugraph</groupId>\n    <artifactId>geaflow-pdata</artifactId>\n    <version>0.1</version>\n</dependency>\n\n<dependency>\n    <groupId>com.antgroup.tugraph</groupId>\n    <artifactId>geaflow-cluster</artifactId>\n    <version>0.1</version>\n</dependency>\n\n<dependency>\n    <groupId>com.antgroup.tugraph</groupId>\n    <artifactId>geaflow-on-local</artifactId>\n    <version>0.1</version>\n</dependency>\n\n<dependency>\n    <groupId>com.antgroup.tugraph</groupId>\n    <artifactId>geaflow-pipeline</artifactId>\n    <version>0.1</version>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u529f\u80fd\u6982\u89c8",children:"\u529f\u80fd\u6982\u89c8"}),"\n",(0,r.jsx)(n.h3,{id:"graph-api",children:"Graph API"}),"\n",(0,r.jsx)(n.p,{children:"Graph API\u662fGeaFlow\u4e2d\u7684\u4e00\u7b49\u516c\u6c11\uff0c\u5176\u63d0\u4f9b\u4e86\u4e00\u5957\u57fa\u4e8eGraphView\u7684\u56fe\u8ba1\u7b97\u7f16\u7a0b\u63a5\u53e3\uff0c\u5305\u542b\u56fe\u6784\u5efa\u3001\u56fe\u8ba1\u7b97\u53ca\u904d\u5386\u3002\u5177\u4f53\u7684API\u8bf4\u660e\u5982\u4e0b\u8868\u683c\u6240\u793a\uff1a"}),"\n",(0,r.jsxs)(n.table,{children:["\n\t",(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"\u7c7b\u578b"}),"\n\t\t",(0,r.jsx)(n.td,{children:"API"}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u8bf4\u660e"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{rowSpan:"7",children:"\u52a8\u6001\u56fe"}),"\n\t\t",(0,r.jsx)(n.td,{children:"PGraphView init(GraphViewDesc graphViewDesc)"}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u4f20\u5165graphViewDesc\u8fdb\u884c\u521d\u59cb\u5316"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PGraphView PIncGraphView appendVertex(PWindowStream vertexStream)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5c06\u5206\u5e03\u5f0fvertex\u6d41\u4f5c\u4e3agraphview\u589e\u91cf\u7684\u56fe\u70b9\u96c6"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PIncGraphView appendEdge(PWindowStream edgeStream)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5c06\u5206\u5e03\u5f0fedge\u6d41\u4f5c\u4e3agraphview\u589e\u91cf\u7684\u56fe\u8fb9\u96c6"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PIncGraphView appendGraph(PWindowStream vertexStream, PWindowStream edgeStream)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5c06\u5206\u5e03\u5f0fvertex\u3001edge\u6d41\u4f5c\u4e3agraphview\u589e\u91cf\u7684\u56fe\u70b9/\u8fb9\u96c6"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:" PGraphTraversal incrementalTraversal(IncVertexCentricTraversal incVertexCentricTraversal)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5728\u52a8\u6001graphview\u4e0a\u8fdb\u884c\u589e\u91cf\u56fe\u904d\u5386"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PGraphCompute incrementalCompute(IncVertexCentricCompute incVertexCentricCompute)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5728\u52a8\u6001graphview\u4e0a\u8fdb\u884c\u589e\u91cf\u56fe\u8ba1\u7b97 "}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"void materialize()     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5c06\u52a8\u6001graphview\u4e2d\u589e\u91cf\u7684\u70b9\u8fb9\u96c6\u5408\u7269\u5316\u5b58\u50a8\u5230state\u4e2d "}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{rowSpan:"7",children:"\u9759\u6001\u56fe"}),"\n\t\t",(0,r.jsx)(n.td,{children:" PGraphCompute compute(VertexCentricCompute vertexCentricCompute)"}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5728Graph\u4e0a\u8fdb\u884c\u9759\u6001\u56feVC\u8ba1\u7b97"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:" PGraphWindow compute(ScatterGatherCompute sgAlgorithm, int parallelism)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5728Graph\u4e0a\u8fdb\u884c\u9759\u6001\u56feSG\u8ba1\u7b97"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:" PGraphTraversal traversal(VertexCentricTraversal vertexCentricTraversal)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5728Graph\u4e0a\u8fdb\u884c\u9759\u6001\u56feVC\u904d\u5386"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:" PWindowStream getEdges()     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u8fd4\u56deedge\u96c6\u5408"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PWindowStream getVertices()     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u8fd4\u56devertex\u96c6\u5408 "}),"\n\t"]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"stream-api",children:"Stream API"}),"\n",(0,r.jsx)(n.p,{children:"Stream API\u63d0\u4f9b\u4e86\u4e00\u5957\u901a\u7528\u8ba1\u7b97\u7684\u7f16\u7a0b\u63a5\u53e3\uff0c\u5305\u62ecsource\u6784\u5efa\u3001\u6d41\u6279\u8ba1\u7b97\u53casink\u8f93\u51fa\u3002\u5177\u4f53\u7684API\u8bf4\u660e\u5982\u4e0b\u8868\u683c\u6240\u793a\uff1a"}),"\n",(0,r.jsxs)(n.table,{children:["\n\t",(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"\u7c7b\u578b"}),"\n\t\t",(0,r.jsx)(n.td,{children:"API"}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u8bf4\u660e"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{rowSpan:"4",children:"\u6d41"}),"\n\t\t",(0,r.jsx)(n.td,{children:"PStreamView init(IViewDesc viewDesc)"}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u4f20\u5165StreamViewDesc\u8fdb\u884c\u521d\u59cb\u5316"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PIncStreamView append(PWindowStream windowStream)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5c06\u5206\u5e03\u5f0f\u6570\u636e\u4f5c\u4e3astreamView\u589e\u91cf\u7684\u6570\u636e\u96c6"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PWindowStream reduce(ReduceFunction reduceFunction)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5728\u52a8\u6001streamView\u4e0a\u8fdb\u884c\u589e\u91cfreduce\u805a\u5408\u8ba1\u7b97"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:" PWindowStream aggregate(AggregateFunction aggregateFunction)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5728\u52a8\u6001streamView\u4e0a\u8fdb\u884c\u589e\u91cfaggregate\u805a\u5408\u8ba1\u7b97"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{rowSpan:"12",children:"\u6279"}),"\n\t\t",(0,r.jsx)(n.td,{children:"PStreamView  PWindowStream map(MapFunction mapFunction)"}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u8fdb\u884cmap\u64cd\u4f5c"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PWindowStream filter(FilterFunction filterFunction)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u8fdb\u884cfilter\u64cd\u4f5c"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:" PWindowStream flatMap(FlatMapFunction flatMapFunction)      "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u8fdb\u884cflatmap\u64cd\u4f5c"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:" PWindowStream union(PStream uStream)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5c06\u4e24\u4e2a\u6d41\u8fdb\u884cunion\u5408\u5e76"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PWindowBroadcastStream broadcast()     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5c06\u6d41\u5e7f\u64ad\u5230\u4e0b\u6e38"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:" PWindowKeyStream keyBy(KeySelector selectorFunction)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u6309\u7167selectorFunction\u89c4\u5219\u8fdb\u884ckeyby"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PStreamSink sink(SinkFunction sinkFunction)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5c06\u7ed3\u679c\u8f93\u51fa"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PWindowCollect collect()     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u89e6\u53d1\u6570\u636e\u7ed3\u679c\u7684\u6536\u96c6"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:"PWindowStream reduce(ReduceFunction reduceFunction)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u8fdb\u884c\u4e00\u4e2awindow\u5185\u7684reduce\u805a\u5408\u8ba1\u7b97"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:" PWindowStream aggregate(AggregateFunction aggregateFunction)     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u8fdb\u884c\u4e00\u4e2awindow\u5185\u7684aggregate\u805a\u5408\u8ba1\u7b97"}),"\n\t"]}),"\n\t",(0,r.jsxs)(n.tr,{children:["\n\t\t",(0,r.jsx)(n.td,{children:" PIncStreamView materialize()     "}),"\n\t\t",(0,r.jsx)(n.td,{children:"\u5c06PWindowKeyStream\u4f5c\u4e3a\u52a8\u6001streamView\uff0c\u9ed8\u8ba4keyby\u540e\u751f\u6210IncstreamView"}),"\n\t"]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"\u5178\u578b\u793a\u4f8b",children:"\u5178\u578b\u793a\u4f8b"}),"\n",(0,r.jsx)(n.h3,{id:"pagerank\u52a8\u6001\u56fe\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",children:"PageRank\u52a8\u6001\u56fe\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd"}),"\n",(0,r.jsx)(n.h4,{id:"pagerank\u7684\u5b9a\u4e49",children:"PageRank\u7684\u5b9a\u4e49"}),"\n",(0,r.jsx)(n.p,{children:"PageRank\u7b97\u6cd5\u6700\u521d\u4f5c\u4e3a\u4e92\u8054\u7f51\u7f51\u9875\u91cd\u8981\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c1996\u5e74\u7531Page\u548cBrin\u63d0\u51fa\uff0c\u5e76\u7528\u4e8e\u8c37\u6b4c\u641c\u7d22\u5f15\u64ce\u7684\u7f51\u9875\u6392\u5e8f\u3002\u4e8b\u5b9e\u4e0a\uff0cPageRank \u53ef\u4ee5\u5b9a\u4e49\u5728\u4efb\u610f\u6709\u5411\u56fe\u4e0a\uff0c\u540e\u6765\u88ab\u5e94\u7528\u5230\u793e\u4f1a\u5f71\u54cd\u529b\u5206\u6790\u3001\u6587\u672c\u6458\u8981\u7b49\u591a\u4e2a\u95ee\u9898\u3002\n\u5047\u8bbe\u4e92\u8054\u7f51\u662f\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5728\u5176\u57fa\u7840\u4e0a\u5b9a\u4e49\u968f\u673a\u6e38\u8d70\u6a21\u578b\uff0c\u5373\u4e00\u9636\u9a6c\u5c14\u53ef\u592b\u94fe\uff0c\u8868\u793a\u7f51\u9875\u6d4f\u89c8\u8005\u5728\u4e92\u8054\u7f51\u4e0a\u968f\u673a\u6d4f\u89c8\u7f51\u9875\u7684\u8fc7\u7a0b\u3002\u5047\u8bbe\u6d4f\u89c8\u8005\u5728\u6bcf\u4e2a\u7f51\u9875\u4f9d\u7167\u8fde\u63a5\u51fa\u53bb\u7684\u8d85\u94fe\u63a5\u4ee5\u7b49\u6982\u7387\u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u7f51\u9875\uff0c\u5e76\u5728\u7f51\u4e0a\u6301\u7eed\u4e0d\u65ad\u8fdb\u884c\u8fd9\u6837\u7684\u968f\u673a\u8df3\u8f6c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5f62\u6210\u4e00\u9636\u9a6c\u5c14\u53ef\u592b\u94fe\u3002PageRank\u8868\u793a\u8fd9\u4e2a\u9a6c\u5c14\u53ef\u592b\u94fe\u7684\u5e73\u7a33\u5206\u5e03\u3002\u6bcf\u4e2a\u7f51\u9875\u7684PageRank\u503c\u5c31\u662f\u5e73\u7a33\u6982\u7387\u3002\n\u7b97\u6cd5\u5b9e\u73b0\u601d\u8def\uff1a1.\u5047\u8bbe\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u7684\u521d\u59cb\u5f71\u54cd\u503c\u76f8\u540c\uff1b2.\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u5bf9\u5176\u4ed6\u70b9\u7684\u8df3\u8f6c\u6982\u7387\uff0c\u5e76\u66f4\u65b0\u70b9\u7684\u5f71\u54cd\u503c\uff1b3.\u8fdb\u884cn\u6b21\u8fed\u4ee3\u8ba1\u7b97\uff0c\u76f4\u5230\u5404\u70b9\u5f71\u54cd\u503c\u4e0d\u518d\u53d8\u5316\uff0c\u5373\u6536\u655b\u72b6\u6001\u3002"}),"\n",(0,r.jsx)(n.h4,{id:"\u5b9e\u4f8b\u4ee3\u7801",children:"\u5b9e\u4f8b\u4ee3\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'\npublic class IncrGraphCompute {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(IncrGraphCompute.class);\n\t// \u8ba1\u7b97\u7ed3\u679c\u8def\u5f84\n    public static final String RESULT_FILE_PATH = "./target/tmp/data/result/incr_graph";\n\t// \u7ed3\u679c\u5bf9\u6bd4\u8def\u5f84\n    public static final String REF_FILE_PATH = "data/reference/incr_graph";\n\n    public static void main(String[] args) {\n\t\t// \u83b7\u53d6\u6267\u884c\u73af\u5883\n        Environment environment = EnvironmentFactory.onLocalEnvironment();\n\t\t// \u6267\u884c\u4f5c\u4e1a\u63d0\u4ea4\n        IPipelineResult result = submit(environment);\n\t\t// \u7b49\u5f85\u6267\u884c\u5b8c\u6210\n        result.get();\n\t\t// \u5173\u95ed\u6267\u884c\u73af\u5883\n\t\tenvironment.shutdown();\n    }\n\n    public static IPipelineResult<?> submit(Environment environment) {\n\t\t// \u6784\u5efa\u4efb\u52a1\u6267\u884c\u6d41\n        final Pipeline pipeline = PipelineFactory.buildPipeline(environment);\n\t\t// \u83b7\u53d6\u4f5c\u4e1a\u73af\u5883\u914d\u7f6e\n        Configuration envConfig = environment.getEnvironmentContext().getConfig();\n\t\t// \u6307\u5b9a\u4fdd\u5b58\u8ba1\u7b97\u7ed3\u679c\u7684\u8def\u5f84\n        envConfig.put(FileSink.OUTPUT_DIR, RESULT_FILE_PATH);\n\n        // graphview \u540d\u79f0\n        final String graphName = "graph_view_name";\n\t\t// \u521b\u5efa\u589e\u91cf\u56fe graphview\n        GraphViewDesc graphViewDesc = GraphViewBuilder\n\t\t\t.createGraphView(graphName)\n\t\t\t// \u8bbe\u7f6e graphview \u5206\u7247\u6570, \u53ef\u4ece\u914d\u7f6e\u4e2d\u6307\u5b9a\n            .withShardNum(envConfig.getInteger(ExampleConfigKeys.ITERATOR_PARALLELISM))\n\t\t\t// \u8bbe\u7f6e graphview backend \u7c7b\u578b\n            .withBackend(BackendType.RocksDB)\n\t\t\t// \u6307\u5b9a graphview \u70b9\u8fb9\u4ee5\u53ca\u5c5e\u6027\u7b49schema\u4fe1\u606f\n            .withSchema(new GraphMetaType(IntegerType.INSTANCE, ValueVertex.class, Integer.class, ValueEdge.class, IntegerType.class))\n            .build();\n\t\t// \u5c06\u521b\u5efa\u597d\u7684graphview\u4fe1\u606f\u6dfb\u52a0\u5230\u4efb\u52a1\u6267\u884c\u6d41\n        pipeline.withView(graphName, graphViewDesc);\n\t\t\n\t\t// \u63d0\u4ea4\u4efb\u52a1\u5e76\u6267\u884c\n        pipeline.submit(new PipelineTask() {\n            @Override\n            public void execute(IPipelineTaskContext pipelineTaskCxt) {\n                Configuration conf = pipelineTaskCxt.getConfig();\n\t\t\t\t// 1. \u6784\u5efa\u70b9\u6570\u636e\u8f93\u5165\u6e90\n                PWindowSource<IVertex<Integer, Integer>> vertices =\n                    // extract vertex from edge file\n                    pipelineTaskCxt.buildSource(new RecoverableFileSource<>("data/input/email_edge",\t\t\t\n\t\t\t\t\t\t// \u6307\u5b9a\u6bcf\u884c\u6570\u636e\u7684\u89e3\u6790\u683c\u5f0f\n                        line -> {\n                            String[] fields = line.split(",");\n                            IVertex<Integer, Integer> vertex1 = new ValueVertex<>(\n                                Integer.valueOf(fields[0]), 1);\n                            IVertex<Integer, Integer> vertex2 = new ValueVertex<>(\n                                Integer.valueOf(fields[1]), 1);\n                            return Arrays.asList(vertex1, vertex2);\n                        }), SizeTumblingWindow.of(10000))\n\t\t\t\t\t\t// \u6307\u5b9a\u70b9\u6570\u636esource\u5e76\u53d1\u6570\n                        .withParallelism(pipelineTaskCxt.getConfig().getInteger(ExampleConfigKeys.SOURCE_PARALLELISM));\n\t\t\t\t\n\t\t\t\t// 2. \u6784\u5efa\u8fb9\u6570\u636e\u8f93\u5165\u6e90\n                PWindowSource<IEdge<Integer, Integer>> edges =\n                    pipelineTaskCxt.buildSource( new RecoverableFileSource<>("data/input/email_edge",\t\t\t\n\t\t\t\t\t\t// \u6307\u5b9a\u6bcf\u884c\u6570\u636e\u7684\u89e3\u6790\u683c\u5f0f\n                        line -> {\n                            String[] fields = line.split(",");\n                            IEdge<Integer, Integer> edge = new ValueEdge<>(Integer.valueOf(fields[0]),\n                                Integer.valueOf(fields[1]), 1);\n                            return Collections.singletonList(edge);\n                        }), SizeTumblingWindow.of(5000))\n\t\t\t\t\t\t// \u6307\u5b9a\u8fb9\u6570\u636esource\u5e76\u53d1\u6570\n\t\t\t\t\t\t.withParallelism(pipelineTaskCxt.getConfig().getInteger(ExampleConfigKeys.SOURCE_PARALLELISM));\n\t\t\t\t\n\t\t\t\t// \u83b7\u53d6\u5b9a\u4e49\u7684graphview, \u5e76\u6784\u5efa\u56fe\u6570\u636e\n                PGraphView<Integer, Integer, Integer> fundGraphView =\n                    pipelineTaskCxt.getGraphView(graphName);\n                PIncGraphView<Integer, Integer, Integer> incGraphView =\n                    fundGraphView.appendGraph(vertices, edges);\n\t\t\t\t// \u83b7\u53d6\u4f5c\u4e1a\u6267\u884cmap\u7b97\u5b50\u7684\u5e76\u53d1\u6570\n                int mapParallelism = pipelineTaskCxt.getConfig().getInteger(ExampleConfigKeys.MAP_PARALLELISM);\n\t\t\t\t// \u83b7\u53d6\u4f5c\u4e1a\u6267\u884csink\u7b97\u5b50\u7684\u5e76\u53d1\u6570\n                int sinkParallelism = pipelineTaskCxt.getConfig().getInteger(ExampleConfigKeys.SINK_PARALLELISM);\n\t\t\t\t// \u521b\u5efasink\u65b9\u6cd5\n                SinkFunction<String> sink = ExampleSinkFunctionFactory.getSinkFunction(conf);\t\t\t\n\t\t\t\t// \u57fa\u4e8e\u56fe\u7b97\u6cd5\uff0c\u6267\u884c\u52a8\u6001\u56fe\u8ba1\u7b97\n                incGraphView.incrementalCompute(new IncGraphAlgorithms(3))\n\t\t\t\t\t// \u83b7\u53d6\u7ed3\u679c\u70b9\u6570\u636e\u5e76\u4f5cmap\u64cd\u4f5c\n                    .getVertices()\n                    .map(v -> String.format("%s,%s", v.getId(), v.getValue()))\n                    .withParallelism(mapParallelism)\n                    .sink(sink)\n                    .withParallelism(sinkParallelism);\n            }\n        });\n\t\t\n        return pipeline.execute();\n    }\n\t\n\t// \u521b\u5efaPagerank\u52a8\u6001\u56fe\u7b97\u6cd5\n    public static class IncGraphAlgorithms extends IncVertexCentricCompute<Integer, Integer,\n        Integer, Integer> {\n\n        public IncGraphAlgorithms(long iterations) {\n\t\t\t// \u8bbe\u7f6e\u7b97\u6cd5\u6700\u5927\u8fed\u4ee3\u6b21\u6570\n            super(iterations);\n        }\n\n        @Override\n        public IncVertexCentricComputeFunction<Integer, Integer, Integer, Integer> getIncComputeFunction() {\n\t\t\t// \u6307\u5b9aPagerank\u8ba1\u7b97\u903b\u8f91\n            return new PRVertexCentricComputeFunction();\n        }\n\n        @Override\n        public VertexCentricCombineFunction<Integer> getCombineFunction() {\n            return null;\n        }\n\n    }\n\n    public static class PRVertexCentricComputeFunction implements\n        IncVertexCentricComputeFunction<Integer, Integer, Integer, Integer> {\n\n        private IncGraphComputeContext<Integer, Integer, Integer, Integer> graphContext;\n\t\t\n\t\t// init\u65b9\u6cd5, \u83b7\u53d6graphContext\n        @Override\n        public void init(IncGraphComputeContext<Integer, Integer, Integer, Integer> graphContext) {\t\n            this.graphContext = graphContext;\n        }\n\t\t\n\t\t// \u7b2c\u4e00\u8f6e\u8fed\u4ee3evolve\u65b9\u6cd5\u5b9e\u73b0\n        @Override\n        public void evolve(Integer vertexId,\n                           TemporaryGraph<Integer, Integer, Integer> temporaryGraph) {\n\t\t\t// \u52a8\u6001\u56fe\u7248\u672c\u6307\u5b9a\u4e3a0\n            long lastVersionId = 0L;\n\t\t\t// \u4ece\u589e\u91cf\u56fe\u4e2d\u83b7\u53d6id\u7b49\u4e8e vertexId \u7684\u70b9\n            IVertex<Integer, Integer> vertex = temporaryGraph.getVertex();\n\t\t\t// \u83b7\u53d6\u5386\u53f2\u5e95\u56fe\n            HistoricalGraph<Integer, Integer, Integer> historicalGraph = graphContext\n                .getHistoricalGraph();\n            if (vertex == null) {\n\t\t\t\t// \u5982\u679c\u589e\u91cf\u56fe\u4e2d\u4e0d\u5b58\u5728id \u7b49\u4e8e vertexId \u7684\u70b9, \u5c31\u4ece\u5386\u53f2\u56fe\u4e2d\u83b7\u53d6\n                vertex = historicalGraph.getSnapShot(lastVersionId).vertex().get();\n            }\n\n            if (vertex != null) {\n\t\t\t\t// \u4ece\u589e\u91cf\u56fe\u4e2d\u83b7\u53d6\u70b9\u5bf9\u5e94\u7684\u6240\u6709\u51fa\u8fb9\n                List<IEdge<Integer, Integer>> newEs = temporaryGraph.getEdges();\n\t\t\t\t// \u4ece\u5386\u53f2\u56fe\u4e2d\u83b7\u53d6\u70b9\u5bf9\u5e94\u7684\u6240\u6709\u51fa\u8fb9\n                List<IEdge<Integer, Integer>> oldEs = historicalGraph.getSnapShot(lastVersionId)\n                    .edges().getOutEdges();\n                if (newEs != null) {\n                    for (IEdge<Integer, Integer> edge : newEs) {\n\t\t\t\t\t\t// \u5411\u589e\u91cf\u56fe\u4e2d\u6240\u6709\u8fb9\u7684\u7ec8\u70b9\uff0c\u53d1\u9001\u6d88\u606f\uff0c\u5185\u5bb9\u4e3avertexId\n                        graphContext.sendMessage(edge.getTargetId(), vertexId);\n                    }\n                }\n                if (oldEs != null) {\n                    for (IEdge<Integer, Integer> edge : oldEs) {\n\t\t\t\t\t\t// \u5411\u5386\u53f2\u56fe\u4e2d\u6240\u6709\u8fb9\u7684\u7ec8\u70b9\uff0c\u53d1\u9001\u6d88\u606f\uff0c\u5185\u5bb9\u4e3avertexId\n                        graphContext.sendMessage(edge.getTargetId(), vertexId);\n                    }\n                }\n            }\n\n        }\n\n        @Override\n        public void compute(Integer vertexId, Iterator<Integer> messageIterator) {\n            int max = 0;\n\t\t\t// \u8fed\u4ee3vertexId\u6536\u5230\u7684\u6240\u6709\u6d88\u606f, \u5e76\u53d6\u5176\u4e2d\u7684\u6700\u5927\u503c\n            while (messageIterator.hasNext()) {\n                int value = messageIterator.next();\n                max = max > value ? max : value;\n            }\n\t\t\t// \u4ece\u589e\u91cf\u56fe\u4e2d\u83b7\u53d6id \u7b49\u4e8evertexId\u7684\u70b9\n            IVertex<Integer, Integer> vertex = graphContext.getTemporaryGraph().getVertex();\t\t\n\t\t\t// \u4ece\u5386\u53f2\u56fe\u4e2d\u83b7\u53d6id\u7b49\u4e8e vertexId \u7684\u70b9\n            IVertex<Integer, Integer> historyVertex = graphContext.getHistoricalGraph().getSnapShot(0).vertex().get();\n\t\t\t// \u5c06\u589e\u91cf\u56fe\u4e2d\u7684\u70b9\u5c5e\u6027\u503c\u548c\u6d88\u606f\u7684\u6700\u5927\u503c\uff0c\u4e24\u8005\u53d6\u6700\u5927\n            if (vertex != null && max < vertex.getValue()) {\n                max = vertex.getValue();\n            }\n\t\t\t// \u5c06\u5386\u53f2\u56fe\u4e2d\u7684\u70b9\u5c5e\u6027\u503c\u548c\u6d88\u606f\u7684\u6700\u5927\u503c\uff0c\u4e24\u8005\u53d6\u6700\u5927\n            if (historyVertex != null && max < historyVertex.getValue()) {\n                max = historyVertex.getValue();\n            }\n\t\t\t// \u66f4\u65b0\u589e\u91cf\u56fe\u4e2d\u70b9\u7684\u5c5e\u6027\u503c\n            graphContext.getTemporaryGraph().updateVertexValue(max);\n        }\n\t\t\n\t\t\n        @Override\n        public void finish(Integer vertexId, MutableGraph<Integer, Integer, Integer> mutableGraph) {\n\t\t\t// \u4ece\u589e\u91cf\u56fe\u4e2d\u83b7\u53d6vertexId\u76f8\u5173\u7684\u70b9\u8fb9\n            IVertex<Integer, Integer> vertex = graphContext.getTemporaryGraph().getVertex();\n            List<IEdge<Integer, Integer>> edges = graphContext.getTemporaryGraph().getEdges();\n            if (vertex != null) {\n\t\t\t\t// \u5c06\u589e\u91cf\u56fe\u4e2d\u7684\u70b9\u6dfb\u52a0\u5230\u56fe\u6570\u636e\u4e2d\u3002\n                mutableGraph.addVertex(0, vertex);\n                graphContext.collect(vertex);\n            } else {\n                LOGGER.info("not found vertex {} in temporaryGraph ", vertexId);\n            }\n            if (edges != null) {\n\t\t\t\t// \u5c06\u589e\u91cf\u4e2d\u7684\u8fb9\u6dfb\u52a0\u5230\u56fe\u6570\u636e\u4e2d\u3002\n                edges.stream().forEach(edge -> {\n                    mutableGraph.addEdge(0, edge);\n                });\n            }\n        }\n    }\n\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"pagerank\u9759\u6001\u56fe\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",children:"PageRank\u9759\u6001\u56fe\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd"}),"\n",(0,r.jsx)(n.h4,{id:"\u5b9e\u4f8b\u4ee3\u7801-1",children:"\u5b9e\u4f8b\u4ee3\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'\npublic class PageRank {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PageRank.class);\n\t\n\t// \u8ba1\u7b97\u7ed3\u679c\u8def\u5f84\n    public static final String RESULT_FILE_PATH = "./target/tmp/data/result/pagerank";\n\t\n\t// \u7ed3\u679c\u5bf9\u6bd4\u8def\u5f84\n    public static final String REF_FILE_PATH = "data/reference/pagerank";\n\n    public static void main(String[] args) {\n\t\t// \u83b7\u53d6\u4f5c\u4e1a\u6267\u884c\u73af\u5883\n        Environment environment = EnvironmentFactory.onLocalEnvironment();\n\t\t// \u6267\u884c\u4f5c\u4e1a\u63d0\u4ea4\n        IPipelineResult<?> result = submit(environment);\n        result.get();\n\t\t// \u5173\u95ed\u6267\u884c\u73af\u5883\n        environment.shutdown();\n    }\n\n    public static IPipelineResult<?> submit(Environment environment) {\n\t\t// \u6784\u5efa\u4efb\u52a1\u6267\u884c\u6d41\n        Pipeline pipeline = PipelineFactory.buildPipeline(environment);\n\t\t// \u83b7\u53d6\u4f5c\u4e1a\u76f8\u5173\u914d\u7f6e\n        Configuration envConfig = environment.getEnvironmentContext().getConfig();\n\t\t// \u6307\u5b9a\u7ed3\u679c\u8f93\u51fa\u8def\u5f84\n        envConfig.put(FileSink.OUTPUT_DIR, RESULT_FILE_PATH);\n\t\t\n\t\t// \u63d0\u4ea4\u4efb\u52a1\u5e76\u6267\u884c\n        pipeline.submit((PipelineTask) pipelineTaskCxt -> {\n            Configuration conf = pipelineTaskCxt.getConfig();\n\t\t\t// 1. \u6784\u5efa\u56fe\u4e2d\u70b9\u7684\u8f93\u5165\u6570\u636e\n            PWindowSource<IVertex<Integer, Double>> prVertices =\n                pipelineTaskCxt.buildSource(new FileSource<>("data/input/email_vertex",\n\t\t\t\t\t// \u5b9a\u4e49\u6bcf\u884c\u6570\u636e\u89e3\u6790\u6210\u70b9\u7684\u683c\u5f0f\n                    line -> {\n                        String[] fields = line.split(",");\n                        IVertex<Integer, Double> vertex = new ValueVertex<>(\n                            Integer.valueOf(fields[0]), Double.valueOf(fields[1]));\n                        return Collections.singletonList(vertex);\n                    }), AllWindow.getInstance())\n\t\t\t\t\t// \u8bbe\u5b9a\u5e76\u53d1\u6570\n                    .withParallelism(conf.getInteger(ExampleConfigKeys.SOURCE_PARALLELISM));\n\t\t\t// 2. \u6784\u5efa\u56fe\u4e2d\u8fb9\u7684\u8f93\u5165\u6570\u636e\n            PWindowSource<IEdge<Integer, Integer>> prEdges = pipelineTaskCxt.buildSource(new FileSource<>("data/input/email_edge",\n\t\t\t\t// \u5b9a\u4e49\u6bcf\u884c\u6570\u636e\u89e3\u6790\u6210\u8fb9\u7684\u683c\u5f0f\n                line -> {\n                    String[] fields = line.split(",");\n                    IEdge<Integer, Integer> edge = new ValueEdge<>(Integer.valueOf(fields[0]), Integer.valueOf(fields[1]), 1);\n                    return Collections.singletonList(edge);\n                }), AllWindow.getInstance())\n\t\t\t\t// \u8bbe\u5b9a\u5e76\u53d1\u6570\n                .withParallelism(conf.getInteger(ExampleConfigKeys.SOURCE_PARALLELISM));\n\t\t\t\n\t\t\t// \u8fed\u4ee3\u8ba1\u7b97\u5e76\u53d1\u6570\n            int iterationParallelism = conf.getInteger(ExampleConfigKeys.ITERATOR_PARALLELISM);\t\t\n\t\t\t// \u5b9a\u4e49graphview\n            GraphViewDesc graphViewDesc = GraphViewBuilder\n                .createGraphView(GraphViewBuilder.DEFAULT_GRAPH)\n\t\t\t\t// \u6307\u5b9a\u5206\u7247\u6570\u4e3a2\n                .withShardNum(2)\n\t\t\t\t// \u6307\u5b9abackend\u7c7b\u578b\u4e3amemory\n                .withBackend(BackendType.Memory)\n                .build();\n\t\t\t\n\t\t\t// \u57fa\u4e8e\u70b9\u8fb9\u6570\u636e\u548c\u5b9a\u4e49\u7684graphview, \u6784\u5efa\u9759\u6001\u56fe\n            PGraphWindow<Integer, Double, Integer> graphWindow =\n                pipelineTaskCxt.buildWindowStreamGraph(prVertices, prEdges, graphViewDesc);\n\t\t\t// \u83b7\u53d6sink\u51fd\u6570\n            SinkFunction<IVertex<Integer, Double>> sink = ExampleSinkFunctionFactory.getSinkFunction(conf);\n\t\t\t// \u6307\u5b9a\u8ba1\u7b97\u5e76\u53d1\u6570\uff0c\u6267\u884c\u9759\u6001\u8ba1\u7b97\u65b9\u6cd5\n            graphWindow.compute(new PRAlgorithms(3))\n                .compute(iterationParallelism)\n\t\t\t\t// \u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c\u70b9\uff0c\u6309\u7167\u5b9a\u4e49\u7684sink\u51fd\u6570\u8f93\u51fa\n                .getVertices()\n                .sink(sink)\n                .withParallelism(conf.getInteger(ExampleConfigKeys.SINK_PARALLELISM));\n        });\n\n        return pipeline.execute();\n    }\n\n    public static void validateResult() throws IOException {\n        ResultValidator.validateResult(REF_FILE_PATH, RESULT_FILE_PATH);\n    }\n\n    public static class PRAlgorithms extends VertexCentricCompute<Integer, Double, Integer, Double> {\n\n        public PRAlgorithms(long iterations) {\n\t\t\t// \u6307\u5b9a\u9759\u6001\u56fe\u8ba1\u7b97\u7684\u8fed\u4ee3\u6b21\u6570\n            super(iterations);\n        }\n\n        @Override\n        public VertexCentricComputeFunction<Integer, Double, Integer, Double> getComputeFunction() {\n            return new PRVertexCentricComputeFunction();\n        }\n\n        @Override\n        public VertexCentricCombineFunction<Double> getCombineFunction() {\n            return null;\n        }\n\n    }\n\n    public static class PRVertexCentricComputeFunction extends AbstractVcFunc<Integer, Double, Integer, Double> {\n\t\t// \u9759\u6001\u56fe\u8ba1\u7b97\u65b9\u6cd5\u5b9e\u73b0\n        @Override\n        public void compute(Integer vertexId,\n                            Iterator<Double> messageIterator) {\n\t\t\t// \u4ece\u9759\u6001\u56fe\u4e2d\u83b7\u53d6\u70b9id\u7b49\u4e8evertexId\u7684\u70b9\n            IVertex<Integer, Double> vertex = this.context.vertex().get();\n            if (this.context.getIterationId() == 1) {\n\t\t\t\t// \u7b2c\u4e00\u8f6e\u8fed\u4ee3\u5411\u90bb\u5c45\u8282\u70b9\u53d1\u9001\u6d88\u606f\uff0c\u6d88\u606f\u5185\u5bb9\u4e3avertexId\u70b9\u7684\u5c5e\u6027\u503c\n                this.context.sendMessageToNeighbors(vertex.getValue());\n            } else {\n                double sum = 0;\n                while (messageIterator.hasNext()) {\n                    double value = messageIterator.next();\n                    sum += value;\n                }\n\t\t\t\t// \u7d2f\u79ef\u6d88\u606f\u4e4b\u548c\uff0c\u5e76\u8bbe\u7f6e\u4e3a\u5f53\u524d\u70b9\u7684\u5c5e\u6027\u503c\n                this.context.setNewVertexValue(sum);\n            }\n        }\n\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"wordcount\u6279\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",children:"WordCount\u6279\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd"}),"\n",(0,r.jsx)(n.h4,{id:"\u5b9e\u4f8b\u4ee3\u7801-2",children:"\u5b9e\u4f8b\u4ee3\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'\npublic class WordCountStream {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(WordCountStream.class);\n\t\n\t// \u8ba1\u7b97\u7ed3\u679c\u8def\u5f84\n    public static final String RESULT_FILE_PATH = "./target/tmp/data/result/wordcount";\n\t\n\t// \u7ed3\u679c\u5bf9\u6bd4\u8def\u5f84\n    public static final String REF_FILE_PATH = "data/reference/wordcount";\n\n    public static void main(String[] args) {\n\t\t// \u83b7\u53d6\u4f5c\u4e1a\u6267\u884c\u73af\u5883\n        Environment environment = EnvironmentUtil.loadEnvironment(args);\n\t\t// \u6267\u884c\u4f5c\u4e1a\u63d0\u4ea4\n        IPipelineResult<?> result = submit(environment);\n        result.get();\n\t\t// \u5173\u95ed\u6267\u884c\u73af\u5883\n        environment.shutdown();\n    }\n\n    public static IPipelineResult<?> submit(Environment environment) {\n\t\t// \u6784\u5efa\u4efb\u52a1\u6267\u884c\u6d41\n        Pipeline pipeline = PipelineFactory.buildPipeline(environment);\n\t\t// \u83b7\u53d6\u4f5c\u4e1a\u73af\u5883\u914d\u7f6e\n        Configuration envConfig = environment.getEnvironmentContext().getConfig();\n\t\t// \u6307\u5b9a\u4fdd\u5b58\u8ba1\u7b97\u7ed3\u679c\u7684\u8def\u5f84\n        envConfig.getConfigMap().put(FileSink.OUTPUT_DIR, RESULT_FILE_PATH);\n\n        pipeline.submit(new PipelineTask() {\n            @Override\n            public void execute(IPipelineTaskContext pipelineTaskCxt) {\n                Configuration conf = pipelineTaskCxt.getConfig();\n\n\t\t\t\t// \u83b7\u53d6\u8f93\u5165\u6570\u636e\u6d41\n                PWindowSource<String> streamSource = pipelineTaskCxt.buildSource(\n                    new FileSource<String>("data/input/email_edge",\n\t\t\t\t\t\t// \u5b9a\u4e49\u6bcf\u884c\u6570\u636e\u7684\u89e3\u6790\u683c\u5f0f\n                        line -> {\n                            String[] fields = line.split(",");\n                            return Collections.singletonList(fields[0]);\n\t\t\t\t\t\t\t\t// \u5b9a\u4e49\u6570\u636e\u7a97\u53e3\u5927\u5c0f\n                        }) {}, SizeTumblingWindow.of(5000))\n\t\t\t\t\t// \u5b9a\u4e49\u8f93\u5165\u6570\u636e\u6d41\u7684\u5e76\u53d1\u6570\n                    .withParallelism(conf.getInteger(ExampleConfigKeys.SOURCE_PARALLELISM));\n\n                SinkFunction<String> sink = ExampleSinkFunctionFactory.getSinkFunction(conf);\t\t\t\n                streamSource\n\t\t\t\t\t// \u5bf9\u6d41\u4e2d\u7684\u6570\u636e\u4f5cmap\u64cd\u4f5c\n                    .map(e -> Tuple.of(e, 1))\n\t\t\t\t\t// key by\n                    .keyBy(new KeySelectorFunc())\n\t\t\t\t\t// reduce \u805a\u5408\u7edf\u8ba1\u76f8\u540c\u6570\u636e\u7684\u4e2a\u6570\n                    .reduce(new CountFunc())\n\t\t\t\t\t// \u6307\u5b9a\u7b97\u5b50\u5e76\u53d1\u6570\n                    .withParallelism(conf.getInteger(ExampleConfigKeys.REDUCE_PARALLELISM))\n                    .map(v -> String.format("(%s,%s)", ((Tuple) v).f0, ((Tuple) v).f1))\n                    .sink(sink)\n                    .withParallelism(conf.getInteger(ExampleConfigKeys.SINK_PARALLELISM));\n            }\n        });\n\n        return pipeline.execute();\n    }\n\n    public static void validateResult() throws IOException {\n        ResultValidator.validateResult(REF_FILE_PATH, RESULT_FILE_PATH);\n    }\n\n\n    public static class MapFunc implements MapFunction<String, Tuple<String, Integer>> {\n\t\t// map\u65b9\u6cd5\u5b9e\u73b0, \u5c06\u6bcf\u4e2a\u8f93\u5165\u5355\u8bcd\u8f6c\u6362\u4e3aTuple\n        @Override\n        public Tuple<String, Integer> map(String value) {\n            LOGGER.info("MapFunc process value: {}", value);\n            return Tuple.of(value, 1);\n        }\n    }\n\n    public static class KeySelectorFunc implements KeySelector<Tuple<String, Integer>, Object> {\n\n        @Override\n        public Object getKey(Tuple<String, Integer> value) {\n            return value.f0;\n        }\n    }\n\n    public static class CountFunc implements ReduceFunction<Tuple<String, Integer>> {\n\n        @Override\n        public Tuple<String, Integer> reduce(Tuple<String, Integer> oldValue, Tuple<String, Integer> newValue) {\n            return Tuple.of(oldValue.f0, oldValue.f1 + newValue.f1);\n        }\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"keyagg\u6d41\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd",children:"KeyAgg\u6d41\u8ba1\u7b97\u793a\u4f8b\u4ecb\u7ecd"}),"\n",(0,r.jsx)(n.h4,{id:"\u5b9e\u4f8b\u4ee3\u7801-3",children:"\u5b9e\u4f8b\u4ee3\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'\npublic class WindowStreamKeyAgg implements Serializable {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(WindowStreamKeyAgg.class);\n    // \u8ba1\u7b97\u7ed3\u679c\u8def\u5f84\n    public static final String RESULT_FILE_PATH = "./target/tmp/data/result/wordcount";\n\n    // \u7ed3\u679c\u5bf9\u6bd4\u8def\u5f84\n    public static final String REF_FILE_PATH = "data/reference/wordcount";\n\n    public static void main(String[] args) {\n        // \u83b7\u53d6\u4f5c\u4e1a\u6267\u884c\u73af\u5883\n        Environment environment = EnvironmentUtil.loadEnvironment(args);\n        // \u6267\u884c\u4f5c\u4e1a\u63d0\u4ea4\n        IPipelineResult<?> result = submit(environment);\n        result.get();\n        // \u5173\u95ed\u6267\u884c\u73af\u5883\n        environment.shutdown();\n    }\n\n    public static IPipelineResult<?> submit(Environment environment) {\n        // \u6784\u5efa\u6267\u884c\u6d41\n        Pipeline pipeline = PipelineFactory.buildPipeline(environment);\n        // \u83b7\u53d6\u4f5c\u4e1a\u73af\u5883\u914d\u7f6e\n        Configuration envConfig = environment.getEnvironmentContext().getConfig();\n        // \u6307\u5b9a\u4f5c\u4e1a\u7ed3\u679c\u8f93\u51fa\u8def\u5f84\n        envConfig.getConfigMap().put(FileSink.OUTPUT_DIR, RESULT_FILE_PATH);\n        // \u5f00\u542f\u52a8\u6001\u6d41\u56fematerialize\u5f00\u5173\n        envConfig.getConfigMap().put(FrameworkConfigKeys.INC_STREAM_MATERIALIZE_DISABLE.getKey(), Boolean.TRUE.toString());\n        ResultValidator.cleanResult(RESULT_FILE_PATH);\n        pipeline.submit(new PipelineTask() {\n            @Override\n            public void execute(IPipelineTaskContext pipelineTaskCxt) {\n                Configuration conf = pipelineTaskCxt.getConfig();\n\n                // \u7a97\u53e3\u5927\u5c0f\u5b9a\u4e49\u4e3a5000, \u6784\u5efa\u8f93\u5165\u6570\u636e\u6d41\n                PWindowSource<String> streamSource =\n                    pipelineTaskCxt.buildSource(new FileSource<String>("data/input"\n                        + "/email_edge", Collections::singletonList) {}, SizeTumblingWindow.of(5000));\n\n                SinkFunction<String> sink = ExampleSinkFunctionFactory.getSinkFunction(conf);\n                streamSource\n                    .flatMap(new FlatMapFunction<String, Long>() {\n                        @Override\n                        public void flatMap(String value, Collector collector) {\n                            // flatmap\u65b9\u6cd5\u5b9e\u73b0\n                            String[] records = value.split(SPLIT);\n                            for (String record : records) {\n                                // \u5c06\u6bcf\u884c\u6570\u636e\u5207\u5206\u5e76\u83b7\u53d6\n                                collector.partition(Long.valueOf(record));\n                            }\n                        }\n                    })\n                    // map\u7b97\u5b50\n                    .map(p -> Tuple.of(p, p))\n                    // \u5b9a\u4e49\u7279\u5b9a\u6761\u4ef6\u7684key by\u7b97\u5b50\n                    .keyBy(p -> ((long) ((Tuple) p).f0) % 7)\n                    .aggregate(new AggFunc())\n                    .withParallelism(conf.getInteger(AGG_PARALLELISM))\n                    .map(v -> String.format("%s,%s", ((Tuple) v).f0, ((Tuple) v).f1))\n                    .sink(sink).withParallelism(conf.getInteger(SINK_PARALLELISM));\n            }\n        });\n\n        return pipeline.execute();\n    }\n\n    public static void validateResult() throws IOException {\n        ResultValidator.validateMapResult(REF_FILE_PATH, RESULT_FILE_PATH, String::compareTo);\n    }\n\n\n    public static class AggFunc implements\n        AggregateFunction<Tuple<Long, Long>, Tuple<Long, Long>, Tuple<Long, Long>> {\n\n        // \u5b9a\u4e49\u7d2f\u52a0\u5668\u5b9e\u73b0\n        @Override\n        public Tuple<Long, Long> createAccumulator() {\n            return Tuple.of(0L, 0L);\n        }\n\n        @Override\n        public void add(Tuple<Long, Long> value, Tuple<Long, Long> accumulator) {\n            // \u5bf9\u76f8\u540ckey\u7684\u4e24\u4e2avalue\uff0c\u7d2f\u52a0value\u7684f1\u503c\n            accumulator.setF0(value.f0);\n            accumulator.setF1(value.f1 + accumulator.f1);\n        }\n\n        @Override\n        public Tuple<Long, Long> getResult(Tuple<Long, Long> accumulator) {\n            // \u8fd4\u56de\u7d2f\u52a0\u540e\u7684\u7ed3\u679c\n            return Tuple.of(accumulator.f0, accumulator.f1);\n        }\n\n        @Override\n        public Tuple<Long, Long> merge(Tuple<Long, Long> a, Tuple<Long, Long> b) {\n            return null;\n        }\n    }\n\n}\n\n\n'})})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},5488:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/api_arch-34c1a2451d59849a53fc3e04e0ddfec4.jpeg"},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);