"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5429],{7468:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/graph_view-c9544abc4cbfca2f78fe29f6c3d88084.png"},7620:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var t=a(4848),i=a(8453);const r={},s="Glossary",o={id:"concepts/glossary",title:"Glossary",description:"K8S\uff1ak8s is short for Kubernetes, which is an open-source container orchestration platform that provides automated deployment, scaling, and management of containerized applications. It can run on various cloud platforms, physical servers, and virtual machines, and supports multiple container runtimes, enabling high availability, load balancing, automatic scaling, and automatic repair, and other functions.",source:"@site/../docs-en/source/4.concepts/1.glossary.md",sourceDirName:"4.concepts",slug:"/concepts/glossary",permalink:"/tugraph-analytics/en/concepts/glossary",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quick Start(Running in GeaFlow Console)",permalink:"/tugraph-analytics/en/quick_start/quick_start_docker"},next:{title:"DSL Principle Introduction",permalink:"/tugraph-analytics/en/concepts/dsl_principle"}},c={},l=[{value:"Graph View",id:"graph-view",level:2},{value:"Fundamental Conception",id:"fundamental-conception",level:3},{value:"Functional Description",id:"functional-description",level:3},{value:"Example Introduction",id:"example-introduction",level:3},{value:"Stream Graph",id:"stream-graph",level:2},{value:"Fundamental Conception",id:"fundamental-conception-1",level:3},{value:"Functional Description",id:"functional-description-1",level:3},{value:"Example Introduction",id:"example-introduction-1",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"glossary",children:"Glossary"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"K8S"}),"\uff1ak8s is short for Kubernetes, which is an open-source container orchestration platform that provides automated deployment, scaling, and management of containerized applications. It can run on various cloud platforms, physical servers, and virtual machines, and supports multiple container runtimes, enabling high availability, load balancing, automatic scaling, and automatic repair, and other functions."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Graph Processing"}),"\uff1a Graph Processing is a computing model used to solve computational problems related to graph data structures. The graph computing model can be applied to solve many real-world problems, such as social network analysis, network traffic analysis, medical diagnosis, and more."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ISO-GQL"}),'\uff1aGQL is a standard query language for property graphs, which stands for "Graph Query Language", and is an ISO/IEC international standard database language. In addition to supporting the Gremlin query language, GeaFlow also supports GQL. This means that GeaFlow users can use the GQL language to query and analyze their graph data, thereby enhancing their graph data processing capabilities.']}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Cycle"}),"\uff1a The GeaFlow Scheduler is a core data structure in the scheduling model. A cycle is described as a basic unit that can be executed repeatedly, and it includes a description of input, intermediate calculations, data exchange, and output. It is generated by the vertex groups in the execution plan and supports nesting."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Event"}),"\uff1a The core data structure for the interaction between scheduling and computation at the Runtime layer is the Scheduler. The Scheduler constructs a state machine from a series of event sets and distributes it to workers for computation and execution. Some of these events are executable, meaning they have their own computational semantics, and the entire scheduling and computation process is executed asynchronously."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Graph Traversal"})," : Graph Traversal refers to the process of traversing all nodes or some nodes in a graph data structure, visiting all nodes in a specific order, mainly using depth-first search (DFS) and breadth-first search (BFS). It is used to solve many problems, including finding the shortest path between two nodes, detecting cycles in a graph, and so on."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Graph State"}),"\uff1a GraphState is used to store the graph data or intermediate results of graph iteration calculations in Geaflow. It provides exactly-once semantics and the ability to reuse jobs at the job level. GraphState can be divided into two types: Static and Dynamic. Static GraphState views the entire graph as a complete entity, and all operations are performed on a complete graph. Dynamic GraphState assumes that the graph is dynamically changing and is composed of time slices, and all slices make up a complete graph, and all operations are performed on the slices."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Key State"}),"\uff1a KeyState is used to store intermediate results during the calculation process and is generally used for stream processing, such as recording intermediate aggregation results in KeyState when performing aggregation. Similar to GraphState, Geaflow regularly persists KeyState, so KeyState also provides exactly-once semantics. Depending on the data result, KeyState can be divided into KeyValueState, KeyListState, KeyMapState, and so on."]}),"\n",(0,t.jsx)(n.h2,{id:"graph-view",children:"Graph View"}),"\n",(0,t.jsx)(n.h3,{id:"fundamental-conception",children:"Fundamental Conception"}),"\n",(0,t.jsx)(n.p,{children:"GraphView is the critical core data abstraction in Geaflow, representing a virtual view based on graph structure. It is an abstraction of graph physical storage, which can represent the storage and operation of graph data on multiple nodes. In Geaflow, GraphView is a first-class citizen, and all user operations on the graph are based on GraphView. For example, distributing point and edge streams as GraphView incremental point/edge data sets, generating snapshots for the current GraphView, and triggering calculations based on snapshot graphs or dynamic GraphViews."}),"\n",(0,t.jsx)(n.h3,{id:"functional-description",children:"Functional Description"}),"\n",(0,t.jsx)(n.p,{children:"GraphView has the following main functions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Graph manipulation\uff1ait can add or delete vertex and edge data, as well as perform queries and take snapshots based on a specific time slice."}),"\n",(0,t.jsx)(n.li,{children:"Graph storage: it can be stored in a graph database or other storage media (such as a file system, KV storage, wide-table storage, native graph, etc.)."}),"\n",(0,t.jsx)(n.li,{children:"Graph partitioning: it also supports different graph partitioning methods."}),"\n",(0,t.jsx)(n.li,{children:"Graph computation: it can perform iterative traversal or computation on the graph."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"graph_view|(4000x2500)",src:a(7468).A+"",width:"802",height:"497"})}),"\n",(0,t.jsx)(n.h3,{id:"example-introduction",children:"Example Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Define a GraphView for a social network that describes interpersonal relationships."}),"\n",(0,t.jsx)(n.p,{children:"DSL Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"CREATE GRAPH social_network (\n\tVertex person (\n\t  id int ID,\n\t  name varchar\n\t),\n\tEdge knows (\n\t  person1 int SOURCE ID,\n\t  person2 int DESTINATION ID,\n\t  weight int\n\t)\n) WITH (\n\tstoreType='rocksdb',\n\tshardCount = 128\n);\n"})}),"\n",(0,t.jsx)(n.p,{children:"HLA Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'//build graph view.\nfinal String graphName = "social_network";\nGraphViewDesc graphViewDesc = GraphViewBuilder\n\t.createGraphView(graphName)\n\t.withShardNum(128)\n\t.withBackend(BackendType.RocksDB)\n    .withSchema(new GraphMetaType(IntegerType.INSTANCE, ValueVertex.class,\n                String.class, ValueEdge.class, Integer.class))\n\t.build();\n\n// bind the graphview with pipeline1\npipeline.withView(graphName, graphViewDesc);\npipeline.submit(new PipelineTask());\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"stream-graph",children:"Stream Graph"}),"\n",(0,t.jsx)(n.h3,{id:"fundamental-conception-1",children:"Fundamental Conception"}),"\n",(0,t.jsx)(n.p,{children:'The term "Streaming Graph" refers to graph data that is stream-based, dynamic, and constantly changing. Within the context of GeaFlow, Streaming Graph also refers to the computing mode for streaming graphs, Which is designed for graphs that undergo streaming changes, and performs operations such as graph traversal, graph matching, and graph computation based on graph changes.'}),"\n",(0,t.jsx)(n.p,{children:"Based on the GeaFlow framework, it is easy to perform dynamic computation on streaming graphs. In GeaFlow, we have abstracted two core concepts: Dynamic Graph and Static Graph."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Static Graph refers to a static graph, in which the nodes and edges are fixed at a certain point in time and do not change. Computation on Static Graph is based on the static structure of the entire graph, so conventional graph algorithms and processing can be used for computation."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Dynamic Graph refers to a dynamic graph, where nodes and edges are constantly changing. When the status of a node or edge changes, Dynamic Graph updates the graph structure promptly and performs computation on the new graph structure. In Dynamic Graph, nodes and edges can have dynamic attributes, which can also change with the graph. Computation on Dynamic Graph is based on the real-time structure and attributes of the graph, so special algorithms and processing are required for computation."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"GeaFlow provides various computation modes and algorithms based on Dynamic Graph and Static Graph to facilitate users' choices and usage based on different needs. At the same time, GeaFlow also supports custom algorithms and processing, so users can extend and optimize algorithms according to their own needs."}),"\n",(0,t.jsx)(n.h3,{id:"functional-description-1",children:"Functional Description"}),"\n",(0,t.jsx)(n.p,{children:"Streaming Graph mainly has the following features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Supports streaming processing of node and edge data, but the overall graph is static."}),"\n",(0,t.jsx)(n.li,{children:"Supports continuous updates and queries of the graph structure, and can handle incremental data processing caused by changes in the graph structure."}),"\n",(0,t.jsx)(n.li,{children:"Supports backtracking history and can be queried based on historical snapshots."}),"\n",(0,t.jsx)(n.li,{children:"Supports the calculation logic order of the graph, such as the time sequence of edges."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Through real-time graph data flow and changes, Streaming Graph can dynamically implement graph calculations and analysis, and has a wide range of applications. For example, in the fields of social network analysis, financial risk control, and Internet of Things data analysis, Streaming Graph has broad applications prospects."}),"\n",(0,t.jsx)(n.h3,{id:"example-introduction-1",children:"Example Introduction"}),"\n",(0,t.jsx)(n.p,{children:"When building a Streaming Graph, a new node and edge can be added to the graph continuously through an incremental data stream, thus dynamically constructing the graph. At the same time, for each incremental data graph construction completion, it can trigger traversal calculation tracking the evolving process of Bob's 2-degree friends over time."}),"\n",(0,t.jsx)(n.p,{children:"DSL code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-SQL",children:"\nset geaflow.dsl.window.size = 1;\n\nCREATE TABLE table_knows (\n  personId int,\n  friendId int,\n  weight int\n) WITH (\n  type='file',\n  geaflow.dsl.file.path = 'resource:///data/table_knows.txt'\n);\n\nINSERT INTO social_network.knows\nSELECT personId, friendId, weight\nFROM table_knows;\n\nCREATE TABLE result (\n  personName varchar,\n  friendName varchar,\n  weight int\n) WITH (\n\ttype='console'\n);\n\n-- Graph View Name Defined in Graph View Concept --\nUSE GRAPH social_network;\n-- find person id 3's known persons triggered every window.\nINSERT INTO result\nSELECT\n\tname,\n\tknown_name,\n\tweight\nFROM (\n  MATCH (a:person where a.name = 'Bob') -[e:knows]->{1, 2}(b)\n  RETURN a.name as name, b.name as known_name, e.weight as weight\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:"HLA code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"//build graph view.\nfinal String graphName = \"social_network\";\nGraphViewDesc graphViewDesc = GraphViewBuilder.createGraphView(graphName).build();\npipeline.withView(graphName, graphViewDesc);\n\n// submit pipeLine task.\npipeline.submit(new PipelineTask() {\n\t@Override\n\tpublic void execute(IPipelineTaskContext pipelineTaskCxt) {\n\n        // build vertices streaming source.\n\t\tPStreamSource<IVertex<Integer, String>> persons =\n\t\t\tpipelineTaskCxt.buildSource(\n\t\t\t\tnew CollectionSource.(getVertices()), SizeTumblingWindow.of(5000));\n\t\t// build edges streaming source.\n\t\tPStreamSource<IEdge<Integer, Integer>> knows =\n\t\t\tpipelineTaskCxt.buildSource(\n\t\t\t\tnew CollectionSource<>(getEdges()), SizeTumblingWindow.of(5000));\n\t\t// build graphview by graph name.\n\t\tPGraphView<Integer, String, Integer> socialNetwork =\n\t\t\tpipelineTaskCxt.buildGraphView(graphName);\n\t\t// incremental build graph view.\n\t\tPIncGraphView<Integer, String, Integer> incSocialNetwor =\n\t\t\tsocialNetwork.appendGraph(vertices, edges);\n\n\t\t// traversal by 'Bob'.\n\t\tincGraphView.incrementalTraversal(new IncGraphTraversalAlgorithms(2))\n\t\t\t.start('Bob')\n\t\t\t.map(res -> String.format(\"%s,%s\", res.getResponseId(), res.getResponse()))\n\t\t\t.sink(new ConsoleSink<>());\n\t}\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(6540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);